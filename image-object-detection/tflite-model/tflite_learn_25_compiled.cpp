/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 06.04.2024 18:26:13

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 114192;
#else
constexpr int kTensorArenaSize = 113168;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,64,64,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[4] = { 15131, -19829, -28696, -24092, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00026032232563011348, 0.00022807635832577944, 0.00016304607561323792, 0.00018345873104408383, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 48,-37,-55,-61,66,-48,3,-36,116,-22,88,33,-38,-57,19,-14,11,-12,-45,127,-13,43,-32,35,-16,18,-34,61,35,-8,-39,11, 
  /* [1][0][][] */ 19,48,-35,-1,-10,33,80,29,-21,-27,-101,24,1,-21,29,-53,71,-44,14,-65,21,-27,-34,6,-59,-37,52,-127,-8,-56,-43,-5, 
  /* [2][0][][] */ -41,94,24,61,-5,-57,22,40,-47,-108,73,-71,-96,91,-127,61,35,45,69,-74,12,26,2,-4,11,-12,-10,-55,-39,-6,66,55, 
  /* [3][0][][] */ 34,-62,77,22,4,69,16,-25,10,-51,-42,87,42,4,-127,7,76,-104,86,-117,-61,17,17,5,78,12,-102,-17,-78,62,29,45, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0068613598123192787, 0.0060114478692412376, 0.0042974334210157394, 0.004835453350096941, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -1505, 542, -128, -158, -1441, 765, 716, 226, -427, -1336, 2359, 937, 150, -1218, 1163, -1186, 483, -665, 352, 555, -1877, -907, -924, -1442, 739, -1049, 332, -899, -1589, -2525, 570, 206, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 6.1761609686072916e-05, 8.2973216194659472e-05, 7.8490287705790251e-05, 8.1646023318171501e-05, 6.2524930399376899e-05, 7.3893985245376825e-05, 6.5567423007450998e-05, 0.00010770168591989204, 7.154201011871919e-05, 6.3077270169742405e-05, 8.5020001279190183e-05, 8.2793696492444724e-05, 6.0504557040985674e-05, 7.7238008088897914e-05, 8.6680644017178565e-05, 6.0703143390128389e-05, 9.5218703791033477e-05, 7.2627859481144696e-05, 8.9174507593270391e-05, 0.0001259837590623647, 5.6566401326563209e-05, 5.7433979236520827e-05, 6.2357263232115656e-05, 6.4897954871412367e-05, 7.1078800829127431e-05, 5.8177418395644054e-05, 8.8002234406303614e-05, 9.4812312454450876e-05, 6.2648265156894922e-05, 6.6894746851176023e-05, 6.7779234086629003e-05, 0.00010554579785093665, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -66,-77,89,7,45,-32,-107,-119,17,-113,-127,-26,12,-25,-64,23,-48,-28,-89,-36,-83,-123,-32,56,-96,-24,29,-74,60,-37,-53,-103,35,-88,-114,19,-92,-103,-78,-12,28,-108,-83,49,7,-90,55,-52, 
  /* [1][0][][] */ -59,50,-39,16,-28,81,36,24,70,-63,-107,22,18,-127,45,74,80,-15,51,96,-22,7,-5,25,-17,58,-3,77,-59,26,9,-23,66,93,-30,23,46,22,-50,-9,-35,13,12,-98,-19,40,-28,-44, 
  /* [2][0][][] */ 34,-21,-46,54,14,-89,26,34,-127,75,-65,118,90,-52,12,-120,-55,-45,-5,-17,-45,-64,45,-44,-13,25,72,42,3,9,5,13,-43,-5,-121,-126,-65,19,114,3,-102,-88,-43,-59,-64,107,13,-25, 
  /* [3][0][][] */ 25,15,4,-18,-37,55,-127,28,51,4,-39,-23,62,-12,60,33,42,29,-14,-21,76,-60,-89,-89,-58,-31,-18,96,21,-45,2,0,-11,3,-17,-8,-63,-79,43,69,-12,-78,-87,-58,50,35,-24,-46, 
  /* [4][0][][] */ 19,54,-34,11,-50,-55,9,-19,23,43,41,15,0,17,-43,-90,-54,-36,-62,-22,57,-104,51,31,-43,-39,28,-79,-62,0,-2,-71,27,69,11,-107,-73,-21,-127,31,-54,-82,-95,-39,2,53,7,17, 
  /* [5][0][][] */ 92,-80,73,83,36,-86,26,50,14,-56,-41,-14,24,7,27,25,61,61,-113,89,46,21,-8,-98,-64,-111,-74,-41,62,2,-47,-60,-54,-51,-127,-29,-60,-64,70,-39,-116,-19,46,19,-34,41,19,-14, 
  /* [6][0][][] */ 3,-9,107,86,-78,-24,24,73,-15,-49,3,-127,46,-79,119,-59,55,23,-13,110,-40,-78,58,-18,-48,-23,5,-32,-46,-63,12,-38,-70,-108,-92,-61,16,44,-70,30,-50,66,47,-32,-96,107,-93,-20, 
  /* [7][0][][] */ 48,47,-12,-8,-42,76,-5,9,54,6,-90,-21,4,-127,39,58,37,20,-3,70,34,13,-32,15,-45,77,26,35,-72,61,-57,26,19,13,-10,36,-41,18,-5,-10,24,-31,58,-7,16,10,27,-56, 
  /* [8][0][][] */ 8,8,-48,-88,33,-9,-15,-31,9,13,127,67,15,102,-83,-82,-70,47,16,-4,0,-12,105,104,-79,56,22,28,-12,0,12,72,54,-35,103,28,70,42,-38,21,64,68,-107,1,-5,-51,-6,75, 
  /* [9][0][][] */ -27,-17,61,7,39,-115,3,-127,13,10,-24,13,-51,-65,-114,-48,-28,-34,-38,-90,-28,59,-114,-112,60,-27,22,-8,-42,-71,-63,53,25,-26,1,-37,-94,-7,-61,-60,15,-85,7,-97,40,-16,-110,17, 
  /* [10][0][][] */ -69,77,69,-40,56,82,39,62,58,53,-9,-57,110,61,21,26,-39,-8,-19,-72,11,37,28,9,48,71,-33,-17,-14,76,-91,-25,110,127,104,51,27,-26,21,53,17,71,-110,-52,-7,1,22,-4, 
  /* [11][0][][] */ 86,-39,16,93,87,-7,44,36,3,85,-79,89,4,-108,-2,-80,-13,-47,-23,44,46,27,7,-127,-40,-121,-59,70,73,-60,-25,2,-86,-72,-38,-16,-14,19,16,-59,-38,86,-33,-47,-27,-8,-61,-34, 
  /* [12][0][][] */ 46,32,-13,40,83,-8,-34,17,-126,83,-67,63,-52,-38,10,-80,-53,8,-127,-63,68,-74,-4,18,-25,-101,59,-70,99,-15,-70,115,-122,-126,-117,-58,10,-98,59,42,74,46,-95,-94,-70,-22,-74,84, 
  /* [13][0][][] */ 32,-21,19,21,84,107,17,42,75,-127,-62,-62,76,-24,70,4,-119,-90,-8,-38,16,-36,28,-27,-123,84,33,56,-85,-44,-1,-17,66,117,-31,18,-100,-82,20,99,-31,-5,-79,-54,-30,38,1,-51, 
  /* [14][0][][] */ 20,-43,83,42,55,68,54,-32,-56,12,127,29,-23,115,45,11,-6,-36,109,54,-39,23,42,109,37,-50,11,-5,-89,-6,-7,54,66,-9,-23,7,96,123,-3,35,37,-21,85,125,56,-97,41,-33, 
  /* [15][0][][] */ -11,3,-53,37,69,-104,22,-108,56,-26,-117,-13,111,-49,-42,-127,48,-20,-50,-13,20,-18,33,110,39,45,56,69,6,-11,4,-111,69,29,-73,-50,-84,56,84,-1,-24,68,-78,-71,-3,-79,-20,-95, 
  /* [16][0][][] */ -34,4,70,-13,25,73,-24,34,-1,41,-108,34,-16,-127,-16,-18,75,57,8,53,78,35,-44,-24,-13,30,-52,51,-61,11,-34,19,-63,28,-29,5,-2,0,-7,-55,-28,-12,56,-1,29,74,40,4, 
  /* [17][0][][] */ 10,-101,10,43,-44,-127,-24,-86,11,-73,47,25,67,22,-87,-8,6,17,82,65,-83,-34,0,-54,12,11,-103,2,76,-75,-34,41,-40,-36,5,-25,-47,55,-80,-32,-85,-44,-31,-15,-10,-7,38,-97, 
  /* [18][0][][] */ -49,66,67,-25,4,-56,-74,10,-9,53,-127,-21,-15,-56,44,-17,18,-9,27,-9,76,-32,-9,-86,10,-25,5,89,24,25,-51,29,37,-10,-88,-73,-8,-13,5,50,-55,6,-28,-55,-64,30,21,14, 
  /* [19][0][][] */ -11,9,19,-3,43,-55,44,44,68,-30,73,-45,7,127,-32,-6,5,-69,71,21,-27,80,48,53,25,-41,28,-43,-17,-36,26,18,54,-16,94,44,8,32,-47,-54,40,-35,-67,66,18,-16,88,22, 
  /* [20][0][][] */ -44,35,23,46,-117,52,61,14,-18,-28,-62,-33,-47,87,-2,-100,-88,-73,-102,-68,-20,-78,-105,-91,35,-111,-124,2,-19,-13,3,66,56,7,-38,28,-2,-51,-57,-127,-104,-71,-120,-84,-61,-100,-102,57, 
  /* [21][0][][] */ 59,69,43,-115,68,-97,49,-8,-24,-81,-87,13,9,101,-12,-111,-116,-52,67,-37,74,-67,40,-95,31,-104,-7,51,26,-21,-37,-43,11,9,-66,-127,79,60,-109,-28,19,-18,2,-35,-110,-91,-60,63, 
  /* [22][0][][] */ 7,-70,-78,-98,53,-67,87,27,-127,54,-86,-107,68,-74,-120,-92,15,52,-121,-70,56,-85,3,-27,60,-25,-126,71,-74,-89,-83,-113,7,21,-29,-13,-16,-37,-50,-101,-53,-31,-16,52,23,-100,49,-39, 
  /* [23][0][][] */ 26,-96,-32,9,47,-124,-7,-115,30,-100,124,29,-18,-48,-20,-64,33,-63,-90,42,38,-92,62,-25,-38,-29,47,-17,21,14,110,-59,-59,10,8,16,42,-13,-127,-11,-90,-33,-32,-33,-84,-110,63,-11, 
  /* [24][0][][] */ -34,-49,-56,-26,-42,-127,-116,-57,0,114,0,72,104,-8,-33,-105,-45,41,-9,-34,101,-96,-64,-88,46,-35,30,76,108,6,-58,-45,-5,4,-16,-41,-17,-118,89,-12,-91,-61,70,-67,9,7,33,74, 
  /* [25][0][][] */ -101,-73,-96,-35,59,-90,-1,23,51,-126,37,-4,45,99,-127,-46,-91,29,45,-123,35,56,-29,-42,-12,-65,-75,9,48,-100,122,79,62,-120,68,53,62,-71,-49,-29,-60,63,-120,37,67,10,49,8, 
  /* [26][0][][] */ 21,-37,2,15,-95,33,22,13,-62,-68,77,31,-91,-99,41,24,96,50,-24,2,14,61,60,-9,5,66,-22,-5,-26,33,-65,20,-50,-82,-127,-46,-23,69,-63,46,-122,89,84,30,-76,33,-56,45, 
  /* [27][0][][] */ 10,-8,-56,-81,-77,-67,2,-29,8,30,114,-50,-25,127,31,-37,18,33,84,-80,-74,-14,0,-18,113,47,-71,-16,54,1,15,-21,20,29,-57,-67,-69,-33,-77,80,8,-17,-21,49,44,-6,24,41, 
  /* [28][0][][] */ 53,-39,29,-4,-117,-93,-97,-100,-52,-126,51,32,-88,-71,-34,42,35,60,-62,20,-57,-14,-111,-62,-113,31,-68,-74,-82,-105,-1,-44,-107,-8,45,36,-25,-111,-75,29,64,2,-127,42,-113,-50,-10,9, 
  /* [29][0][][] */ -1,-15,15,-68,-94,28,-127,-41,32,-58,-117,-76,57,-121,-62,-17,-94,56,-39,-75,-82,-78,-5,-42,-34,-46,-76,-16,-84,-57,36,-48,18,-22,-108,-95,-43,32,0,64,5,37,-57,17,-52,90,-73,-48, 
  /* [30][0][][] */ 28,-40,-51,34,-54,42,-80,3,103,-6,-40,-29,-60,-60,57,38,-7,15,86,-93,46,-72,-98,0,-115,73,-6,127,-5,-61,-116,9,-32,-16,-79,-35,21,-52,24,61,75,-57,-30,46,98,-12,95,70, 
  /* [31][0][][] */ 31,-41,15,56,37,40,-67,-44,-17,-4,-89,-47,60,-127,-17,69,-35,-62,23,10,42,9,-43,32,15,-32,35,43,-29,-30,-16,55,23,26,-64,-16,54,-61,-12,-41,24,-37,-31,-31,7,-11,-15,26, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0027428187895566225, 0.003684821305796504, 0.0034857355058193207, 0.0036258806940168142, 0.002776717534288764, 0.0032816145103424788, 0.0029118338134139776, 0.0047830068506300449, 0.003177163889631629, 0.0028012467082589865, 0.0037757183890789747, 0.0036768487188965082, 0.0026869932189583778, 0.0034301220439374447, 0.0038494672626256943, 0.0026958123780786991, 0.0042286403477191925, 0.0032253861427307129, 0.0039602192118763924, 0.0055949091911315918, 0.0025121006183326244, 0.0025506296660751104, 0.0027692716103047132, 0.002882102970033884, 0.003156593069434166, 0.0025836455170065165, 0.0039081587456166744, 0.0042105927132070065, 0.0027821948751807213, 0.0029707800131291151, 0.0030100599396973848, 0.0046872640959918499, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { -700, 680, 2095, 2611, 9281, -344, -2064, 14064, 1192, 4903, 1391, -1951, 4201, -821, 3340, -900, 26, -3204, 507, 1904, 2953, 3642, 5345, 1212, -3081, -1507, -45, 1731, 827, 3308, -2289, 2405, 4316, 3461, 3495, 2513, 6999, 2171, 126, -615, 1728, 9702, -242, 2305, 9767, 156, 1561, 6022, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.0003105431969743222, 0.00022685463773086667, 0.00014707358786836267, 0.00017702445620670915, 9.7144482424482703e-05, 0.00021161053155083209, 0.00019033193530049175, 6.9026653363835067e-05, 0.00027541606687009335, 0.00016315295943059027, 0.00030028607579879463, 0.00022931376588530838, 0.00014670903328806162, 0.00029020509100519121, 0.00021033910161349922, 0.00024044861493166536, 0.00016904901713132858, 4.342303509474732e-05, 0.00029144223663024604, 0.00029496982460841537, 0.00021987134823575616, 0.0001560702221468091, 0.00011772058496717364, 0.00020648166537284851, 0.00019465904915705323, 0.0003164789522998035, 0.00016732780204620212, 0.00029657935374416411, 0.00025730120250955224, 0.00012854486703872681, 0.00013104396930430084, 0.00016752065857872367, 0.00014955541701056063, 0.0002210717648267746, 0.00020013484754599631, 0.00014651876699645072, 0.00010948470298899338, 0.00015289962175302207, 0.00023557661916129291, 0.00025002798065543175, 0.00026640965370461345, 9.0333640400785953e-05, 0.00034679076634347439, 0.00016342813614755869, 7.5416253821458668e-05, 0.00028109998675063252, 0.00018523962353356183, 0.00011183771130163223, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ 18,-34,-72,12,-127,11,-58,-3, 
  /* [1][0][][] */ -89,19,127,-16,-71,3,-4,-10, 
  /* [2][0][][] */ -29,97,-53,32,-29,-127,-8,72, 
  /* [3][0][][] */ -122,9,-5,127,44,-50,-77,-23, 
  /* [4][0][][] */ -3,-32,16,-103,-3,7,-127,38, 
  /* [5][0][][] */ 38,127,-52,-26,-7,-33,7,-85, 
  /* [6][0][][] */ 87,-75,73,92,-68,-127,12,-115, 
  /* [7][0][][] */ 12,127,-56,-47,-24,-29,8,-115, 
  /* [8][0][][] */ -10,-21,42,-10,20,4,-51,-127, 
  /* [9][0][][] */ -101,-44,-127,12,-105,-51,-105,4, 
  /* [10][0][][] */ 120,20,80,-57,-127,-14,65,72, 
  /* [11][0][][] */ 127,-46,-100,26,76,0,-92,7, 
  /* [12][0][][] */ -44,-98,127,16,51,-1,-97,90, 
  /* [13][0][][] */ 16,-79,37,0,3,-94,63,-127, 
  /* [14][0][][] */ -127,61,108,2,-4,-64,20,-53, 
  /* [15][0][][] */ 3,127,-19,-54,-23,3,-11,-87, 
  /* [16][0][][] */ 43,127,-16,92,-13,-22,7,108, 
  /* [17][0][][] */ 58,106,-18,127,-52,122,-124,17, 
  /* [18][0][][] */ 56,-30,127,-13,59,-77,27,-17, 
  /* [19][0][][] */ 14,5,3,127,2,-12,-12,-72, 
  /* [20][0][][] */ -29,30,-31,30,17,77,-127,11, 
  /* [21][0][][] */ 1,-10,24,52,21,127,45,-40, 
  /* [22][0][][] */ 48,-127,6,45,-62,65,29,2, 
  /* [23][0][][] */ -36,-127,11,-101,-20,-93,-10,-127, 
  /* [24][0][][] */ 18,-7,0,-74,-27,-127,-31,31, 
  /* [25][0][][] */ 45,85,127,0,8,5,-67,26, 
  /* [26][0][][] */ -75,15,127,-41,-104,5,108,-2, 
  /* [27][0][][] */ -74,48,-11,-90,34,127,-18,69, 
  /* [28][0][][] */ 6,-104,40,57,52,9,-36,127, 
  /* [29][0][][] */ -77,22,85,-21,-127,31,109,-14, 
  /* [30][0][][] */ 117,-127,16,49,-87,-25,45,-115, 
  /* [31][0][][] */ 72,43,82,-61,-127,5,20,104, 
  /* [32][0][][] */ -12,-42,127,-81,3,-43,-99,-119, 
  /* [33][0][][] */ 32,53,86,-127,31,21,-36,57, 
  /* [34][0][][] */ -16,-127,45,-11,31,89,53,-101, 
  /* [35][0][][] */ 5,9,41,33,4,127,11,-57, 
  /* [36][0][][] */ 21,-1,15,22,1,-127,47,9, 
  /* [37][0][][] */ 18,-11,21,59,-121,127,-47,-43, 
  /* [38][0][][] */ -106,-59,-74,-41,58,11,-127,28, 
  /* [39][0][][] */ 10,28,38,-102,2,35,-127,16, 
  /* [40][0][][] */ 94,-23,-89,-127,78,24,52,10, 
  /* [41][0][][] */ 33,-22,7,127,-97,-15,-54,-60, 
  /* [42][0][][] */ -47,29,50,127,-59,-43,-27,-20, 
  /* [43][0][][] */ 127,-54,54,56,-88,24,109,20, 
  /* [44][0][][] */ 34,-90,82,-119,-74,127,88,30, 
  /* [45][0][][] */ -55,42,-26,2,93,-30,-127,-55, 
  /* [46][0][][] */ -104,-92,-17,-3,25,127,-42,-97, 
  /* [47][0][][] */ -82,-103,-25,10,-7,127,0,-69, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0034891110844910145, 0.0025488275568932295, 0.0016524468082934618, 0.0019889599643647671, 0.0010914677986875176, 0.0023775522131472826, 0.0021384763531386852, 0.00077554967720061541, 0.0030944400932639837, 0.0018331066239625216, 0.0033738671336323023, 0.0025764571037143469, 0.0016483508516103029, 0.003260602243244648, 0.0023632671218365431, 0.0027015628293156624, 0.001899351947940886, 0.0004878799372818321, 0.003274502232670784, 0.0033141362946480513, 0.0024703666567802429, 0.0017535286024212837, 0.0013226508162915707, 0.0023199268616735935, 0.0021870937198400497, 0.0035558023955672979, 0.0018800132675096393, 0.0033322202507406473, 0.002890910254791379, 0.0014442671090364456, 0.0014723459025844932, 0.0018821799894794822, 0.0016803313046693802, 0.0024838540703058243, 0.0022486171219497919, 0.0016462131170555949, 0.0012301164679229259, 0.0017179051646962762, 0.002646823413670063, 0.0028091918211430311, 0.0029932484030723572, 0.0010149445151910186, 0.00389637122862041, 0.0018361983820796013, 0.00084734003758057952, 0.003158301580697298, 0.0020812617149204016, 0.0012565536890178919, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -2151, -6893, -7053, 4103, 7102, 4372, 5417, -85, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 8.1571932241786271e-05, 0.00013107490667607635, 9.1326037363614887e-05, 9.7917582024820149e-05, 0.00010042632493423298, 7.9482568253297359e-05, 0.00017352197028230876, 8.1973128544632345e-05, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 30,23,56,60,-4,-32,67,38,-5,50,-10,-32,28,-10,36,-11,-31,-54,-127,-26,21,-72,58,98,15,-26,34,-15,-11,-82,-10,41,-25,54,50,8,38,85,-54,-61,10,50,-82,-31,40,43,-33,-74, 
  /* [1][0][][] */ -11,-32,-1,69,-55,23,14,-8,11,28,-42,-35,25,-32,44,24,54,6,96,-26,3,65,32,-85,29,25,-1,-11,-25,2,19,0,-18,-15,-109,110,27,15,-123,-41,15,-28,86,-7,127,-55,-62,74, 
  /* [2][0][][] */ -12,6,24,-30,-41,-35,-26,80,-68,83,-72,-15,100,-9,53,-9,-52,-108,20,-19,-25,-11,60,14,14,73,30,27,23,-17,66,22,-36,-20,30,60,6,44,33,-127,26,58,-9,-15,42,10,-44,12, 
  /* [3][0][][] */ 35,-4,-127,-37,14,30,88,-32,2,-39,9,30,-21,-64,50,47,19,70,-2,50,-48,46,-70,-27,-71,-62,43,-14,-78,-36,-52,27,102,63,-32,27,-51,5,10,2,48,-99,-55,-10,45,-16,53,-18, 
  /* [4][0][][] */ 4,55,-9,-3,23,-18,-68,-115,-49,34,-28,82,-14,-39,19,55,26,69,-72,0,25,3,-41,-23,62,-12,16,23,-27,8,19,-33,34,-23,-127,47,-22,-3,53,12,-53,-27,86,34,27,-83,21,18, 
  /* [5][0][][] */ -59,-33,92,36,110,-16,8,49,-126,13,-126,-25,-127,-104,56,38,-42,22,18,26,55,14,-24,-54,10,-21,6,11,-52,-9,-31,-35,-49,6,58,16,-6,77,-4,-12,-11,-49,-51,83,-19,-5,56,28, 
  /* [6][0][][] */ 82,47,8,24,3,-12,-75,-78,-12,3,1,56,-22,-15,-10,29,-15,10,7,-33,90,-23,69,127,0,-53,18,-29,-35,-23,-35,-25,62,-6,16,-12,-14,25,-37,21,-34,-16,-46,-19,-25,-35,26,-15, 
  /* [7][0][][] */ 13,41,40,-57,76,-61,-44,20,21,17,28,33,-44,-11,28,-18,-26,69,-34,56,-41,2,-26,39,33,-52,4,70,-10,37,-50,-21,35,-25,-55,-50,-51,16,127,4,6,-38,-33,-16,39,2,82,-3, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.003466807072982192, 0.0055706831626594067, 0.0038813564460724592, 0.0041614971123635769, 0.0042681186459958553, 0.0033780091907829046, 0.0073746838606894016, 0.0034838579595088959, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { -965, -2840, 3029, -2824, 1375, -1613, 2939, 9800, -930, 22290, -533, -2558, 14269, -3168, 7228, -358, -1058, -6636, 2984, -1314, -2712, 6831, -13002, -6893, 11589, 2662, -1778, -1157, 13238, 4500, 11672, -2228, -8004, 1463, -4248, -5182, 2146, 6484, -5768, 12557, 4606, -1872, -3901, -8000, -10237, 2689, 1601, 7389, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 9.1994705144315958e-05, 0.00016524925013072789, 0.00020003046665806323, 0.00013073734589852393, 0.00016485809464938939, 0.00025396942510269582, 0.00022042224009055644, 0.00039262516656890512, 0.0001260059216292575, 7.043423829600215e-05, 0.00016947468975558877, 9.3796646979171783e-05, 9.2503760242834687e-05, 0.00018553438712842762, 0.00020828979904763401, 0.00024115685664582998, 0.00031755515374243259, 0.0001956935302587226, 0.00014436508354265243, 0.00038557569496333599, 0.00029912442550994456, 0.00015317082579713315, 8.86231500771828e-05, 0.00017887094873003662, 8.8238193711731583e-05, 0.00018135913705918938, 5.5753385822754353e-05, 0.00010105641558766365, 7.7947006502654403e-05, 0.00013065655366517603, 0.000149248939123936, 0.00010142960672965273, 0.00016562679957132787, 0.00014568753249477595, 0.00015526050992775708, 0.00013516045873984694, 9.2928123194724321e-05, 0.00012965133646503091, 0.00015899677237030119, 9.6985619165934622e-05, 0.00016692948702257127, 0.0001793488918337971, 0.00012831560161430389, 0.00013847179070580751, 0.00016587825666647404, 9.8269978479947895e-05, 0.00012974493438377976, 0.00015312286268454045, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 71,127,41,35,-5,-88,44,29,-84,-59,70,127,57,23,5,26,61,-27,65,42,25,-58,67,-34,-66,-86,42,41,-89,-109,19,67,39,-127,-35,70,-59,40,-54,-103,-16,-127,-127,-8,9,-127,83,-37, 55,21,62,-101,127,48,32,-26,-127,-127,58,67,20,-30,-108,21,-29,66,62,127,-30,-54,81,75,29,-92,33,-76,-127,-13,-105,99,23,-110,-127,127,19,-44,-127,-68,10,116,-54,41,-58,-121,104,13, 48,4,33,-127,22,-42,12,36,-72,-11,11,107,41,22,119,-18,-68,11,26,73,-1,-59,-127,35,-16,-38,-127,2,-51,-127,18,-9,35,-28,55,-18,-53,-28,-26,-93,-15,-38,83,-45,-4,-91,-29,-127, 
  /* [0][1][][] */ 31,-6,16,112,41,79,38,-127,33,-87,-37,-62,-6,60,-127,127,-127,127,35,24,-9,13,82,-96,-22,127,93,56,6,-8,-127,57,127,68,-68,58,-72,-11,3,-34,-33,-75,-21,-93,79,31,59,-8, 17,51,-127,108,79,52,-127,7,19,-17,-16,-10,-127,127,15,4,49,-74,-127,-49,10,-5,9,-36,-61,43,7,-7,12,-10,-20,-87,25,-50,75,-54,92,-127,98,127,127,99,-83,20,127,59,-127,-30, 127,-52,-5,-121,-2,87,8,-61,100,-110,-72,29,31,33,-101,126,102,49,23,10,25,-127,-66,127,-42,125,-90,49,38,70,-48,11,4,78,127,13,-30,-32,-69,-27,-45,6,107,127,83,3,94,-42, 
  /* [0][2][][] */ 65,1,37,50,-37,-1,48,27,-39,-23,70,22,22,-52,33,-49,6,57,68,-56,127,-46,84,-104,-127,-38,115,127,-35,-85,-47,127,79,64,14,15,-57,67,35,52,-44,-39,7,15,72,57,22,-90, 43,-33,-6,32,-46,-127,-2,-66,-41,-79,14,-106,-14,-37,-47,9,-26,9,-2,52,44,103,94,49,-43,-63,-67,53,-112,-23,-66,25,40,77,-96,18,-127,-96,52,12,-72,51,-38,63,-3,1,106,9, 52,-68,24,-58,-52,14,41,57,-28,-20,127,37,31,-57,78,-57,45,30,23,-66,48,-69,-54,51,-20,-43,-123,80,15,-91,22,42,57,-10,22,4,-116,-30,-22,-11,-52,14,16,64,31,61,-38,-38, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.0046095950528979301, 0.0082801738753914833, 0.010022962465882301, 0.006550879217684269, 0.0082605741918087006, 0.012725691311061382, 0.011044736951589584, 0.019673340022563934, 0.0063138012774288654, 0.0035292608663439751, 0.008491898886859417, 0.0046998853795230389, 0.0046351025812327862, 0.0092966044321656227, 0.010436814278364182, 0.01208368968218565, 0.01591179333627224, 0.0098056504502892494, 0.0072337272576987743, 0.019320109859108925, 0.014988281764090061, 0.0076749576255679131, 0.0044406559318304062, 0.0089627187699079514, 0.0044213668443262577, 0.0090873949229717255, 0.0027936447877436876, 0.0050636520609259605, 0.0039057047106325626, 0.0065468312241137028, 0.0074784429743885994, 0.0050823516212403774, 0.0082990918308496475, 0.0072999913245439529, 0.0077796662226319313, 0.0067725093103945255, 0.0046563660725951195, 0.0064964629709720612, 0.0079668797552585602, 0.0048596756532788277, 0.0083643654361367226, 0.0089866667985916138, 0.0064295330084860325, 0.006938430480659008, 0.0083116916939616203, 0.0049240314401686192, 0.0065011526457965374, 0.0076725548133254051, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { -1725, -2135, 5776, -544, -2612, 1679, 4833, 28169, 3180, 3976, 3703, 4399, 1396, 12086, 19450, -3921, 10252, 1489, 826, -4643, 1383, 843, 1228, 4884, 343, 4342, 1901, 1918, 4209, 290, 1253, -1291, -2057, -3237, -1545, 2775, 1499, 1619, 3846, 1975, 1828, 1466, 1975, 5211, 9788, 4829, -2503, 586, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.00020082334231119603, 0.00020646049233619124, 0.00014133307558950037, 0.00018419006664771587, 0.00017612108786124736, 0.00016995695477817208, 0.00015725164848845452, 4.3632364395307377e-05, 0.00010172682232223451, 0.00018416122475173324, 0.0001390748075209558, 0.00012451889051590115, 0.00024805645807646215, 7.2187482146546245e-05, 5.4893869673833251e-05, 0.00012847385369241238, 8.8374021288473159e-05, 0.00014121609274297953, 0.00028593512251973152, 0.00014105431910138577, 0.00013316560944076627, 0.00022827029170002788, 0.00023352957214228809, 0.00011079233081545681, 0.00027921207947656512, 0.0001302130549447611, 0.00018674309831112623, 0.00016121719090733677, 9.1877191152889282e-05, 0.00019741483265534043, 0.00015575811266899109, 0.00023072934709489346, 0.00022246810840442777, 9.5083996711764485e-05, 0.00016552266606595367, 0.00017046135326381773, 0.00018344770069234073, 0.00014345701492857188, 0.00017185494652949274, 0.00022712834470439702, 0.00025337512488476932, 0.00011204273323528469, 0.00023569633776787668, 0.00013249943731352687, 7.7116390457376838e-05, 0.00011511000775499269, 0.00016018642054405063, 0.00019846725626848638, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -11,-9,-49,127,0,-68,-107,-107, 
  /* [1][0][][] */ 127,-25,33,-28,47,-93,-37,72, 
  /* [2][0][][] */ -14,22,28,-127,-13,74,-27,59, 
  /* [3][0][][] */ 24,127,-45,-51,-71,-17,51,-57, 
  /* [4][0][][] */ -1,-28,-47,-18,26,-127,-107,-76, 
  /* [5][0][][] */ -26,-25,21,50,39,127,72,-48, 
  /* [6][0][][] */ -2,4,-37,25,14,-1,-127,-20, 
  /* [7][0][][] */ 57,-23,13,43,-88,60,127,69, 
  /* [8][0][][] */ 4,26,-98,-27,-51,-124,-74,127, 
  /* [9][0][][] */ 37,19,-66,-37,40,127,-35,54, 
  /* [10][0][][] */ 45,71,127,64,113,99,18,-84, 
  /* [11][0][][] */ -60,-14,-39,88,-127,79,5,-27, 
  /* [12][0][][] */ -32,35,107,0,-10,-59,-127,-63, 
  /* [13][0][][] */ 38,19,-91,-127,6,-39,-63,107, 
  /* [14][0][][] */ -42,-127,20,-66,16,-50,4,-58, 
  /* [15][0][][] */ 22,62,70,117,62,127,4,-34, 
  /* [16][0][][] */ 36,11,-22,-127,24,112,-1,73, 
  /* [17][0][][] */ -61,60,-127,41,105,69,-96,-30, 
  /* [18][0][][] */ -127,56,28,-15,-112,15,-24,-3, 
  /* [19][0][][] */ 107,-24,-16,-21,127,-79,92,-98, 
  /* [20][0][][] */ 127,-96,39,-12,-7,44,84,57, 
  /* [21][0][][] */ 15,-39,-31,56,-15,42,127,-11, 
  /* [22][0][][] */ 81,-12,-127,-50,30,88,33,122, 
  /* [23][0][][] */ 9,105,-29,-20,-4,-29,-127,21, 
  /* [24][0][][] */ 127,-23,-111,15,33,3,8,9, 
  /* [25][0][][] */ -32,-59,46,-30,73,127,21,-73, 
  /* [26][0][][] */ 3,-57,1,46,127,-69,-125,4, 
  /* [27][0][][] */ -86,-127,80,57,80,-13,-108,114, 
  /* [28][0][][] */ -5,23,-125,-123,127,-7,-112,114, 
  /* [29][0][][] */ -77,-8,127,-125,14,-22,24,16, 
  /* [30][0][][] */ 66,-95,29,-109,-54,-127,77,-55, 
  /* [31][0][][] */ 21,52,56,6,-37,-18,-127,14, 
  /* [32][0][][] */ 12,1,7,127,-31,-123,-50,-108, 
  /* [33][0][][] */ 62,-102,-55,127,-89,126,76,-49, 
  /* [34][0][][] */ 9,-56,19,9,-24,127,-11,3, 
  /* [35][0][][] */ 19,127,76,30,-55,-5,-58,3, 
  /* [36][0][][] */ 16,127,-81,-113,-35,0,94,-55, 
  /* [37][0][][] */ 88,-41,65,15,43,127,87,-21, 
  /* [38][0][][] */ -75,-17,59,61,30,-39,-26,127, 
  /* [39][0][][] */ -6,59,127,-57,-10,-7,-36,48, 
  /* [40][0][][] */ 22,15,9,6,-10,-10,127,-15, 
  /* [41][0][][] */ -3,57,-127,-96,-86,-122,-78,96, 
  /* [42][0][][] */ 2,49,54,-40,-127,-55,-92,18, 
  /* [43][0][][] */ 45,-32,-4,-2,-50,-127,91,33, 
  /* [44][0][][] */ -97,-106,-7,-83,13,76,-35,-127, 
  /* [45][0][][] */ 31,106,116,11,17,127,-42,4, 
  /* [46][0][][] */ -51,-10,-16,16,127,52,-41,66, 
  /* [47][0][][] */ 78,107,-64,-2,-32,-41,115,-127, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.0031851741950958967, 0.0032745827920734882, 0.0022416242863982916, 0.0029213607776910067, 0.0027933821547776461, 0.0026956154033541679, 0.0024941018782556057, 0.00069203448947519064, 0.0016134461620822549, 0.0029209034983068705, 0.0022058067843317986, 0.0019749414641410112, 0.0039343186654150486, 0.0011449351441115141, 0.00087064848048612475, 0.0020376695320010185, 0.0014016630593687296, 0.0022397688589990139, 0.0045350962318480015, 0.0022372030653059483, 0.0021120836026966572, 0.003620498813688755, 0.0037039138842374086, 0.0017572303768247366, 0.0044284649193286896, 0.0020652543753385544, 0.0029618535190820694, 0.0025569978170096874, 0.0014572252985090017, 0.0031311132479459047, 0.002470413688570261, 0.003659500740468502, 0.0035284727346152067, 0.0015080871526151896, 0.0026252851821482182, 0.0027036154642701149, 0.0029095865320414305, 0.0022753111552447081, 0.0027257187757641077, 0.0036023866850882769, 0.0040186760015785694, 0.0017770624253898859, 0.0037382801529020071, 0.0021015175152570009, 0.0012231104774400592, 0.0018257112242281437, 0.0025406491477042437, 0.003147805342450738, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { 8987, 7529, 20061, -7045, -8799, 11872, 15144, 10168, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 6.606888200622052e-05, 6.4145875512622297e-05, 8.1616286479402333e-05, 6.5280531998723745e-05, 0.00010563270916463807, 7.077866030158475e-05, 7.4728122854139656e-05, 5.8871744840871543e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 127,-9,-15,-5,-34,-57,-33,-1,85,-40,-59,-18,-26,68,-48,1,19,16,24,19,29,-36,11,7,29,11,11,46,1,93,-20,-85,63,-38,3,-5,24,-51,-4,25,-47,-23,-25,-38,-53,-63,-3,-10, 
  /* [1][0][][] */ -80,4,86,-91,49,38,52,-5,11,30,-8,124,57,-30,-95,-53,-82,-108,28,-7,-51,104,-41,-6,2,-97,68,127,20,-15,9,18,23,-2,-20,45,-76,-55,30,18,32,-11,-110,-36,-42,-78,-120,24, 
  /* [2][0][][] */ 86,48,-56,-77,-45,-5,-63,-96,40,-9,-72,-26,19,25,-74,40,-10,62,6,28,27,39,-14,-15,-127,-11,14,-48,-42,14,44,-89,20,-44,10,45,-51,-87,39,27,-119,-110,-43,-73,-34,-101,34,6, 
  /* [3][0][][] */ -2,-9,66,10,-94,-33,2,28,-32,-30,-2,78,-16,-33,-71,-38,-42,16,9,-39,-57,127,23,-35,44,49,51,-38,42,19,4,29,22,29,15,-34,37,54,5,0,26,-10,15,-45,-21,40,-7,16, 
  /* [4][0][][] */ -49,10,-121,14,-20,68,17,33,-44,127,31,36,46,-67,-4,61,-29,0,-15,11,-11,23,-45,25,7,-19,42,-15,-15,-76,75,61,39,40,2,-60,-56,22,22,-36,35,18,32,37,22,8,17,62, 
  /* [5][0][][] */ -40,-2,-4,12,53,-67,-55,-33,-38,-68,39,-35,65,10,-15,6,41,-2,-5,22,19,71,13,33,14,-11,-57,-9,-49,-30,-127,-7,-54,-9,4,-28,17,-22,-11,-20,-3,0,-34,-15,22,28,-2,60, 
  /* [6][0][][] */ 33,47,-51,97,-29,19,-88,42,-40,-64,25,12,21,21,49,-6,6,-40,-74,38,12,37,40,-39,-96,3,-46,10,-104,44,-87,-26,78,-49,-68,-92,127,-13,-52,-34,39,25,33,-69,-71,-13,-89,-41, 
  /* [7][0][][] */ -26,4,-47,19,-17,4,11,-18,-40,-24,60,53,65,23,-43,-85,-33,69,14,-17,48,28,25,-18,-46,96,-45,-66,-23,-25,-127,10,-24,-27,-31,8,-7,-19,-71,-22,-2,44,37,13,-35,-58,108,-54, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.002807927317917347, 0.0027261998038738966, 0.0034686920698732138, 0.0027744225226342678, 0.0044893901795148849, 0.0030080929864197969, 0.0031759452540427446, 0.0025020490866154432, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 12165, 1139, 3069, 1900, 38361, -3342, 3338, -2150, 3300, -7038, -3078, -6601, 20848, 7607, 3378, 1377, 5546, 10318, -1180, -6397, 1372, -1974, 10841, -1784, 12449, 13738, -4391, 545, -1119, -207, 9429, 4812, 1468, -9236, 2492, 116, 11591, 8043, 2250, 2008, 2416, -6545, 5553, -969, -1699, 5307, 13871, -8555, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00018316789646632969, 0.00013692793436348438, 0.0001506030821474269, 7.4126808613073081e-05, 4.2036404920509085e-05, 0.00027789545129053295, 0.00013705025776289403, 9.208330448018387e-05, 0.00025781491422094405, 0.00023255747510120273, 0.00014147079491522163, 7.4889554525725543e-05, 8.9855413534678519e-05, 8.4936691564507782e-05, 0.00013562748790718615, 0.00011232327233301476, 0.00013538271014112979, 0.0001177668891614303, 0.00016968212730716914, 0.00010438917524879798, 0.00014464963169302791, 0.00024541121092624962, 9.0589222963899374e-05, 0.00021590726100839674, 0.00015361096302513033, 9.7560419817455113e-05, 0.00037245074054226279, 0.00021202943753451109, 0.00040193914901465178, 0.00014982250286266208, 0.00011334064038237557, 0.00028414840926416218, 0.00039749019197188318, 0.00022803855245001614, 0.00012120769679313526, 0.00015032426745165139, 0.00016438125749118626, 0.0001441172935301438, 0.00016638668603263795, 0.00010633785859681666, 0.00036634993739426136, 0.00011977274698438123, 0.00017461017705500126, 0.00023976067313924432, 0.00019442457414697856, 0.00019960664212703705, 0.00010414128337288275, 0.00015891077055130154, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -122,67,60,83,-74,5,-127,30,-36,80,35,47,-60,125,-25,26,83,41,69,-24,-116,-74,-10,67,-87,29,21,-58,33,-62,125,39,43,97,82,-16,10,-113,-31,121,-42,39,-4,4,-12,-17,-8,13, -25,-21,-22,95,-21,27,-96,29,-26,-24,127,127,-85,-30,-98,-56,6,-53,81,87,32,16,-54,77,-94,-8,0,-127,5,-48,-18,-67,0,22,-26,-127,-36,20,42,76,127,11,-26,127,10,-127,15,-11, -123,68,31,127,-105,5,-90,38,-32,101,-18,30,-125,106,44,62,12,-26,42,-4,-28,-32,46,67,-62,-28,8,-75,-18,-127,65,13,-18,61,-39,-39,14,-61,-15,64,-29,48,-27,15,-25,-2,20,43, 
  /* [0][1][][] */ 58,-23,-9,127,-127,17,33,-20,-48,62,10,51,-62,-17,-106,107,-9,-32,102,35,31,13,-87,-35,-121,-84,15,-78,127,2,66,70,-127,83,59,53,3,48,-127,-127,50,-30,6,30,-106,57,-41,3, 84,-65,-127,-115,40,127,29,127,-127,-127,-1,94,-69,-71,-127,-97,-39,-127,-112,127,127,127,-18,105,-127,53,-77,118,-70,-48,-120,-127,2,127,-127,90,-127,-80,77,-74,-38,127,-127,-70,127,78,-127,-39, 74,-1,69,93,-104,-36,-16,-9,-57,49,-7,16,-44,-120,-4,127,-127,-65,74,50,3,64,16,-127,-11,-87,127,33,-21,62,-69,21,83,-30,-40,-2,-17,-74,-43,-98,38,-29,-21,-4,-26,23,-72,127, 
  /* [0][2][][] */ -127,-34,43,15,-99,22,63,15,114,47,71,37,-56,127,86,-49,76,56,58,-45,-48,-45,-29,47,5,-46,5,-30,9,79,127,14,-1,88,70,56,1,-17,-50,11,-56,5,29,-12,-17,-9,-49,36, -110,-127,25,-113,-53,7,126,22,54,22,83,-1,4,-55,55,-7,-73,11,-127,11,-84,-3,-127,-12,60,-127,11,56,-3,95,65,-62,-10,-49,-28,51,-34,52,77,-78,3,11,31,-45,29,-26,-34,30, -77,-31,31,-7,-11,30,-3,0,44,46,27,67,-127,40,108,9,-70,29,67,-55,-48,-11,11,-80,-25,-61,25,68,3,54,42,-34,11,73,-51,10,17,-127,-4,-63,-12,27,22,13,-40,-20,-8,14, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0088709108531475067, 0.0066314870491623878, 0.0072937807999551296, 0.0035899975337088108, 0.0020358436740934849, 0.013458613306283951, 0.0066374107263982296, 0.0044596395455300808, 0.012486102059483528, 0.011262872256338596, 0.0068514999002218246, 0.0036269377451390028, 0.0043517416343092918, 0.0041135256178677082, 0.0065685058943927288, 0.0054398709908127785, 0.0065566510893404484, 0.0057035079225897789, 0.0082177883014082909, 0.0050556189380586147, 0.0070054521784186363, 0.011885385029017925, 0.0043872804380953312, 0.010456494055688381, 0.007439454086124897, 0.0047248988412320614, 0.01803797110915184, 0.010268689133226871, 0.019466109573841095, 0.0072559774853289127, 0.0054891426116228104, 0.013761446811258793, 0.019250644370913506, 0.011044018901884556, 0.0058701480738818645, 0.0072802780196070671, 0.0079610645771026611, 0.0069796708412468433, 0.0080581884831190109, 0.0051499945111572742, 0.01774250715970993, 0.0058006527833640575, 0.0084564564749598503, 0.011611727066338062, 0.0094160772860050201, 0.0096670472994446754, 0.0050436132587492466, 0.0076961261220276356, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 38183, -737, 1686, 728, 2436, 1731, 6587, -644, 6883, 3545, -234, 301, 2732, 296, -174, 8379, 4051, 3521, -236, 73, 3389, 1328, 3504, -1742, 5201, 1998, 8377, -880, 7674, 99, 12772, 2732, 8012, 6311, 2566, 1517, 2187, 2658, 1622, 2028, -3386, 5235, 2215, 2947, 7413, 417, -170, 2173, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 3.1107796530704945e-05, 0.00024958659196272492, 0.00026879512006416917, 0.00029010733123868704, 0.00021737224597018212, 0.00013793974358122796, 0.00010505885438760743, 0.00027537369169294834, 0.00013361373567022383, 0.00017291163385380059, 0.00029932727920822799, 0.00015942996833473444, 0.00020371274149511009, 0.00037310560583136976, 0.00016072885773610324, 9.244706598110497e-05, 0.00013605420826934278, 0.00021946390916127712, 0.00022952356084715575, 0.00019348389469087124, 0.00018017216643784195, 0.00014969689073041081, 0.00017422789824195206, 9.8165102826897055e-05, 0.00013701622083317488, 0.00034054118441417813, 0.00010424314677948132, 0.00032095785718411207, 0.00012127798254368827, 0.00017961551202461123, 7.9228942922782153e-05, 0.00019267141760792583, 0.00010482934158062562, 6.6979926486965269e-05, 0.00015143092605285347, 0.00037377493572421372, 0.00025233079213649035, 0.00020764673536177725, 0.00027011270867660642, 0.00010648606985341758, 0.00012665853137150407, 0.00012328237062320113, 0.00027900756685994565, 0.00018996802100446075, 0.00012130098912166432, 0.00017454969929531217, 0.00029487229767255485, 0.00026158709079027176, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ 85,-79,78,-23,33,-127,-33,-89, 
  /* [1][0][][] */ -42,-28,-48,63,-127,77,-12,33, 
  /* [2][0][][] */ 51,-19,37,-1,127,-46,2,72, 
  /* [3][0][][] */ -10,127,16,68,4,67,-29,-63, 
  /* [4][0][][] */ -3,127,43,-14,25,11,-91,44, 
  /* [5][0][][] */ -76,39,18,6,127,-17,94,6, 
  /* [6][0][][] */ 41,-52,72,23,-16,127,54,-33, 
  /* [7][0][][] */ -14,-72,23,88,80,15,-50,127, 
  /* [8][0][][] */ 2,-9,-50,-45,-27,127,-38,-22, 
  /* [9][0][][] */ -127,-8,-35,-15,68,-1,-56,-13, 
  /* [10][0][][] */ -20,-93,15,23,-1,-70,-127,-51, 
  /* [11][0][][] */ 51,105,-39,8,-44,-104,19,127, 
  /* [12][0][][] */ 56,-47,-74,48,-67,126,127,73, 
  /* [13][0][][] */ 4,-38,-92,6,-127,76,8,19, 
  /* [14][0][][] */ -54,127,-57,60,50,38,-27,65, 
  /* [15][0][][] */ -26,-35,38,-10,15,81,-58,-127, 
  /* [16][0][][] */ 122,-72,-127,22,-88,74,-122,-8, 
  /* [17][0][][] */ -2,127,-84,-21,-80,28,76,-105, 
  /* [18][0][][] */ -18,-61,15,21,127,-87,-3,61, 
  /* [19][0][][] */ -40,71,-1,23,18,-124,-127,30, 
  /* [20][0][][] */ 123,-37,32,-95,18,-77,-9,127, 
  /* [21][0][][] */ 69,-26,89,117,-40,127,78,21, 
  /* [22][0][][] */ -50,110,19,-32,123,-8,-127,-81, 
  /* [23][0][][] */ 54,-93,59,127,12,-47,84,-67, 
  /* [24][0][][] */ -15,44,127,-53,-40,-28,16,-53, 
  /* [25][0][][] */ -67,-94,84,67,40,5,-22,127, 
  /* [26][0][][] */ 6,-35,-127,-48,-37,42,-16,102, 
  /* [27][0][][] */ 13,127,-95,-55,-6,10,34,-63, 
  /* [28][0][][] */ 4,14,-19,-67,-39,-1,-127,-34, 
  /* [29][0][][] */ -45,127,-126,14,79,62,-39,3, 
  /* [30][0][][] */ 40,-127,23,-50,-94,98,95,37, 
  /* [31][0][][] */ -56,-3,-43,67,127,-1,-34,-50, 
  /* [32][0][][] */ -9,60,68,-101,127,-2,-65,-95, 
  /* [33][0][][] */ -114,50,-127,8,59,18,-25,17, 
  /* [34][0][][] */ 93,-88,108,-127,-84,-117,33,93, 
  /* [35][0][][] */ -127,-4,29,-2,-42,60,-29,-7, 
  /* [36][0][][] */ -1,-20,-18,30,-6,14,127,43, 
  /* [37][0][][] */ -22,-6,-41,1,-29,-127,-50,-5, 
  /* [38][0][][] */ -127,34,12,22,-109,9,60,37, 
  /* [39][0][][] */ -44,-77,49,-79,-22,127,-118,-104, 
  /* [40][0][][] */ 74,-127,47,79,-42,-50,122,17, 
  /* [41][0][][] */ 31,127,101,30,42,50,-102,-51, 
  /* [42][0][][] */ 34,127,-22,-5,-49,31,-8,-63, 
  /* [43][0][][] */ -21,42,-65,-127,5,2,-47,46, 
  /* [44][0][][] */ -17,14,13,16,2,127,-13,-36, 
  /* [45][0][][] */ 29,30,-127,-64,-31,-27,-84,89, 
  /* [46][0][][] */ 62,127,-116,-5,-73,-1,10,-113, 
  /* [47][0][][] */ 46,-25,22,-60,-86,-127,-28,7, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.00049312948249280453, 0.0039565162733197212, 0.0042610154487192631, 0.0045988624915480614, 0.0034458455629646778, 0.0021866592578589916, 0.0016654222272336483, 0.0043653007596731186, 0.0021180822513997555, 0.0027410434558987617, 0.0047450195997953415, 0.0025273284409195185, 0.0032293112017214298, 0.0059145740233361721, 0.0025479188188910484, 0.0014654967235401273, 0.0021567693911492825, 0.003479003207758069, 0.0036384714767336845, 0.0030671607237309217, 0.0028561395592987537, 0.0023730369284749031, 0.0027619092725217342, 0.0015561406034976244, 0.0021720193326473236, 0.0053983540274202824, 0.0016524915117770433, 0.0050879134796559811, 0.0019225324504077435, 0.0028473152779042721, 0.0012559592723846436, 0.003054280998185277, 0.0016617840155959129, 0.0010617844527587295, 0.0024005253799259663, 0.0059251845814287663, 0.0040000183507800102, 0.0032916739583015442, 0.0042819022201001644, 0.0016880468465387821, 0.0020078264642506838, 0.0019543066155165434, 0.0044229058548808098, 0.0030114261899143457, 0.0019228971796110272, 0.0027670105919241905, 0.0046743978746235371, 0.00414675148203969, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 5918, -2136, -2196, 2035, 2440, -18435, -2871, -8659, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 0.00020885049889329821, 0.0001541236269986257, 0.00019286222232040018, 0.00013981554366182536, 0.00019728984625544399, 9.4428178272210062e-05, 7.7843455073889345e-05, 0.00011631564848357812, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -17,18,-4,32,-29,8,-3,36,-58,-10,-28,6,-13,21,43,6,-42,-23,26,-26,-24,127,-22,-13,-38,-41,8,38,-40,33,10,-17,-2,31,37,38,21,-1,34,-4,-7,-38,-23,-12,-23,23,31,22, 
  /* [1][0][][] */ 16,60,10,39,35,46,50,123,-53,-56,84,-38,-32,-34,31,-30,-16,-10,45,10,37,-127,2,-59,13,10,-13,20,-15,5,-54,-60,-28,2,19,-22,24,54,79,-45,16,34,34,-31,-25,47,-4,46, 
  /* [2][0][][] */ 7,26,-10,18,34,31,-31,26,22,9,73,9,16,-11,36,-52,25,31,-9,12,-8,127,8,-13,14,-53,-1,-2,-35,29,-17,-65,-13,7,17,-45,29,-28,-40,-13,14,-15,-7,-36,-38,27,8,16, 
  /* [3][0][][] */ -52,53,4,9,-36,38,81,7,-14,5,20,8,-8,28,39,32,-19,3,16,-4,61,-76,6,38,-22,-4,-127,50,-32,-30,-9,16,-39,-20,24,28,39,-8,-29,-54,-12,-26,19,30,32,0,22,22, 
  /* [4][0][][] */ 22,-4,-31,-5,35,-27,17,-4,-52,9,-1,21,-5,6,-10,2,-30,27,-16,-13,-8,-127,-4,-10,44,44,35,-59,56,20,-10,-1,-34,41,24,-19,-22,11,0,-5,4,-44,-71,17,28,19,-2,-9, 
  /* [5][0][][] */ -20,63,67,-6,1,33,24,-84,61,-5,4,14,94,-67,23,30,-4,-28,39,14,-28,127,41,22,100,-3,66,40,91,40,-8,-43,-70,-43,111,27,-25,-61,20,-109,47,-16,67,46,-38,-32,-31,-18, 
  /* [6][0][][] */ 70,7,-26,1,36,-30,41,-50,46,26,1,-27,-17,49,40,-76,27,-127,-17,-25,45,-26,-25,27,-62,-53,37,-12,39,-56,122,51,59,55,32,-53,-54,-6,54,-25,-46,26,-93,76,42,-4,51,-27, 
  /* [7][0][][] */ -14,33,39,58,-2,-2,54,92,45,42,-6,61,-67,12,4,-12,61,-28,-34,-21,-12,-127,-2,-86,-58,79,43,12,24,15,18,-15,11,-22,0,4,-10,118,-78,-28,13,-5,32,-21,-37,-8,61,8, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0088761458173394203, 0.0065502538345754147, 0.0081966444849967957, 0.0059421607293188572, 0.0083848182111978531, 0.0040131974965333939, 0.0033083467278629541, 0.0049434150569140911, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 26521, 23258, 7107, 29243, 5474, 10607, 22711, 6690, 36256, 276, 273, 17802, 20429, 626, 5423, -500, 9714, 22034, 18557, 868, 5349, -17316, 738, -1351, 26119, 43547, -5472, -1761, 2102, 8403, -1487, 5296, -12525, 7882, 20780, 35310, 25417, 16215, -1006, -632, 2584, 45125, -2270, -3676, 634, 189, 15093, 5585, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 4.6048615331528708e-05, 6.7817905801348388e-05, 0.00010002982162404805, 3.5949145967606455e-05, 0.00016404580674134195, 0.00010053986625280231, 0.00010725196625571698, 0.00031036557629704475, 5.7566452596802264e-05, 0.00021753548935521394, 8.8506596512161195e-05, 6.058326835045591e-05, 5.7400040532229468e-05, 4.5958338887430727e-05, 6.4655294409021735e-05, 0.00011354622256476432, 2.3399534256896004e-05, 0.00010607482545310631, 5.3336021665018052e-05, 0.00014231631939765066, 8.1591882917564362e-05, 0.00023131391208153218, 0.00013452245912048966, 0.00014484446728602052, 8.6548185208812356e-05, 4.7941342927515507e-05, 9.7387855930719525e-05, 9.4870702014304698e-05, 3.1968782423064113e-05, 0.00012511474778875709, 0.0001781655300874263, 0.00010134821059182286, 6.6916007199324667e-05, 9.9569901067297906e-05, 7.9223296779673547e-05, 8.0172998423222452e-05, 7.0866597525309771e-05, 0.0001462127547711134, 0.00012563676864374429, 0.00027398500242270529, 0.00016616025823168457, 3.0210001568775624e-05, 8.6692933109588921e-05, 9.7441348771099001e-05, 0.00050538586219772696, 0.00010500958887860179, 0.0001037511756294407, 9.8859978606924415e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -55,-44,-36,-59,-50,40,-115,-127,-127,20,21,-127,-109,-17,-114,77,116,-32,-34,95,81,63,-127,79,-61,-125,49,101,63,-8,109,73,36,-14,-123,-49,-127,-127,127,54,58,-6,59,127,-26,26,-32,-97, -90,-64,-127,-115,-52,49,-101,-73,-72,102,43,-104,-89,32,-80,102,127,-63,-59,-23,94,89,69,127,-40,-118,70,109,77,-34,127,78,11,1,-127,-119,-69,-103,108,10,-60,-96,127,92,42,30,-12,-45, -76,-49,-28,-96,-83,36,-56,-54,-99,75,21,-17,-82,97,-38,21,69,1,-44,-82,44,-100,-26,52,32,-114,19,49,90,14,21,42,58,22,-42,-87,-126,-28,49,16,-19,-42,87,48,17,-14,4,-4, 
  /* [0][1][][] */ -127,-127,-78,-12,-37,-19,-113,-68,-56,-27,56,-34,-42,13,-127,127,113,-80,-5,102,81,127,-103,24,-77,-127,127,127,125,-68,110,104,127,-127,-70,-33,-81,-29,36,118,-39,20,49,5,-43,103,-85,-127, -23,-121,-118,-83,-11,-115,-121,-18,-48,66,127,-60,-72,127,-61,52,77,-127,-127,-69,127,107,120,60,-127,-97,107,88,116,-127,67,127,101,-78,-88,-118,-38,-78,67,127,-72,-108,71,43,13,127,-127,-58, -41,-39,-55,-77,-59,-112,-127,-25,-38,87,41,-33,-127,95,-111,59,60,-50,-86,-127,91,-111,-75,8,-37,-127,38,73,110,-28,97,124,119,-4,-2,-127,-108,-54,43,4,-35,-61,11,13,-82,33,-30,-36, 
  /* [0][2][][] */ -83,-5,-16,-9,-77,-36,-111,-1,-103,78,34,-6,-21,-46,-45,-36,81,15,-74,55,24,32,-7,-4,-35,-8,52,116,94,12,-38,90,-20,-37,-33,17,-59,-37,13,29,17,-15,15,0,-21,119,-51,-44, -89,-17,-49,-108,-127,-127,-55,-4,-55,127,101,-32,-90,52,-80,36,33,-43,-47,-27,72,-13,66,-16,-56,-41,44,108,127,-62,5,13,27,-78,-90,-84,-2,-42,10,98,-92,-127,115,14,-50,74,-62,-28, -35,48,-78,-127,-17,-79,-110,-22,-42,60,22,26,-53,36,27,3,84,-10,-62,-83,33,-54,-8,28,-64,-74,16,104,126,-37,7,-1,35,16,-7,-71,-57,-30,6,-5,-127,-24,55,30,-127,26,-20,-18, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0019570661243051291, 0.002882261062040925, 0.0042512672953307629, 0.0015278386417776346, 0.0069719469174742699, 0.0042729442939162254, 0.0045582083985209465, 0.013190536759793758, 0.0024465741589665413, 0.0092452578246593475, 0.0037615301553159952, 0.0025747888721525669, 0.0024395016953349113, 0.0019532293081283569, 0.002747850026935339, 0.0048257145099341869, 0.00099448021501302719, 0.0045081800781190395, 0.0022667809389531612, 0.0060484432615339756, 0.0034676550421863794, 0.0098308408632874489, 0.0057172044180333614, 0.006155889481306076, 0.0036782978568226099, 0.0020375070162117481, 0.0041389837861061096, 0.0040320046246051788, 0.0013586732093244791, 0.0053173764608800411, 0.00757203483954072, 0.0043072989210486412, 0.0028439303860068321, 0.0042317206971347332, 0.0033669900149106979, 0.0034073523711413145, 0.0030118303839117289, 0.0062140417285263538, 0.0053395624272525311, 0.011644362471997738, 0.0070618106983602047, 0.0012839250266551971, 0.0036844497080892324, 0.004141257144510746, 0.021478898823261261, 0.0044629075564444065, 0.0044094249606132507, 0.0042015491053462029, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 666, 4275, 2006, -133, -524, 568, 6374, 3644, 2283, -5813, 1218, 160, 3437, -67, 1040, -1362, 421, 8455, 1344, 1283, -1899, 16803, 2233, -438, 2188, 3011, 3327, -1609, 21, 763, -2062, -1567, 5632, 346, 4310, 15716, 5268, 4077, -2511, -3748, -621, 864, 1750, 1373, -3909, -1486, 3536, 1345, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00026239818544127047, 0.00017035911150742322, 0.00020219123689457774, 0.00027581947506405413, 0.00028513016877695918, 0.00020429390133358538, 0.00013305580068845302, 0.00016537228657398373, 0.00022351954248733819, 0.00012697446800302714, 0.00024618048337288201, 0.0002689739631023258, 0.00015437492402270436, 0.00035254703834652901, 0.00029912058380432427, 0.00025510351406410336, 0.00041835650335997343, 9.9266231700312346e-05, 0.00020501180551946163, 0.00025080976774916053, 0.00020727375522255898, 9.1084963059984148e-05, 0.00018430208729114383, 0.00015344136045314372, 0.00017567345639690757, 0.00017851639131549746, 0.00024299154756590724, 0.00021938436839263886, 0.00037574276211671531, 0.00029778596945106983, 0.00015542753681074828, 0.00020958100503776222, 0.00014976294187363237, 0.00035804900107905269, 0.0001742187887430191, 6.7646207753568888e-05, 0.00017403374658897519, 0.00015980908938217908, 0.00020133005455136299, 0.00014980557898525149, 0.00029096499201841652, 0.00028115574968978763, 0.00023017618514131755, 0.00024411996128037572, 0.00013834433048032224, 0.00025903395726345479, 0.0001652502833167091, 0.00018019262643065304, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -36,81,-31,42,32,127,2,28, 
  /* [1][0][][] */ 65,-127,-56,-5,-24,53,50,-60, 
  /* [2][0][][] */ -95,27,-30,-127,-67,-111,-64,-44, 
  /* [3][0][][] */ -19,127,86,36,3,-99,-39,23, 
  /* [4][0][][] */ -85,42,-127,48,10,6,-46,-60, 
  /* [5][0][][] */ 12,-118,-127,21,-52,-43,119,-4, 
  /* [6][0][][] */ -31,-86,-51,-5,-127,-60,-33,78, 
  /* [7][0][][] */ -25,-41,7,-68,38,15,-37,127, 
  /* [8][0][][] */ 15,15,-78,-104,73,-39,-127,-83, 
  /* [9][0][][] */ -127,54,-33,107,7,77,58,16, 
  /* [10][0][][] */ -26,7,112,-127,-20,41,15,37, 
  /* [11][0][][] */ 92,-3,127,27,-50,40,72,122, 
  /* [12][0][][] */ 51,-13,-8,-82,30,101,127,-116, 
  /* [13][0][][] */ 13,43,-50,69,-9,-127,-40,45, 
  /* [14][0][][] */ 41,-127,-11,-12,19,49,34,-46, 
  /* [15][0][][] */ -63,-6,0,-14,88,127,-56,-19, 
  /* [16][0][][] */ 19,-31,80,26,-12,24,127,51, 
  /* [17][0][][] */ 51,37,42,23,-32,-80,-33,-127, 
  /* [18][0][][] */ -78,29,-103,27,22,-85,68,-127, 
  /* [19][0][][] */ 33,-25,26,-13,-30,35,127,65, 
  /* [20][0][][] */ 27,127,57,9,20,52,35,11, 
  /* [21][0][][] */ -14,32,-3,-61,-6,127,25,-23, 
  /* [22][0][][] */ 36,-6,116,-12,-22,15,127,95, 
  /* [23][0][][] */ -121,113,62,74,-127,-96,-122,88, 
  /* [24][0][][] */ -7,-1,59,29,-120,127,24,-86, 
  /* [25][0][][] */ -54,35,79,21,-127,45,-54,1, 
  /* [26][0][][] */ -31,-127,19,-43,12,50,-1,-14, 
  /* [27][0][][] */ -3,89,49,84,-25,127,-11,-63, 
  /* [28][0][][] */ 16,-109,72,46,49,127,36,32, 
  /* [29][0][][] */ 28,127,-12,39,-48,-55,-23,17, 
  /* [30][0][][] */ -17,83,127,59,-91,-73,-47,-94, 
  /* [31][0][][] */ 10,46,17,45,-51,-28,14,-127, 
  /* [32][0][][] */ -15,-35,-55,74,-127,-46,-25,-18, 
  /* [33][0][][] */ 32,21,48,32,-12,78,18,127, 
  /* [34][0][][] */ 127,-1,-89,-42,-6,-7,63,27, 
  /* [35][0][][] */ 107,91,99,-109,-38,-94,26,127, 
  /* [36][0][][] */ -53,-115,127,47,53,43,33,-44, 
  /* [37][0][][] */ -37,13,-14,-9,-25,-66,-43,127, 
  /* [38][0][][] */ 127,5,48,9,14,16,-55,3, 
  /* [39][0][][] */ 42,52,-116,-127,-106,117,43,-53, 
  /* [40][0][][] */ -25,127,-32,81,-43,-19,-66,-26, 
  /* [41][0][][] */ -127,36,-50,-56,82,39,3,-56, 
  /* [42][0][][] */ 40,-23,7,-2,-20,127,4,71, 
  /* [43][0][][] */ -88,38,127,37,68,8,-49,4, 
  /* [44][0][][] */ 24,127,17,34,-50,-60,-16,-11, 
  /* [45][0][][] */ -60,46,56,-127,-8,10,-40,-17, 
  /* [46][0][][] */ 17,-87,-18,41,52,10,-127,96, 
  /* [47][0][][] */ -103,-108,35,117,127,-99,72,78, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0033132424578070641, 0.0021510859951376915, 0.0025530229322612286, 0.0034827101044356823, 0.0036002742126584053, 0.002579572843387723, 0.0016800654120743275, 0.0020881183445453644, 0.0028223306871950626, 0.0016032778657972813, 0.0031084651127457619, 0.0033962731249630451, 0.0019492572173476219, 0.0044515314511954784, 0.0037769277114421129, 0.0032211341895163059, 0.0052824928425252438, 0.001253412221558392, 0.0025886376388370991, 0.0031669179443269968, 0.0026171987410634756, 0.0011501092230901122, 0.0023271406535059214, 0.001937469351105392, 0.002218188950791955, 0.0022540860809385777, 0.003068199148401618, 0.0027701167855411768, 0.0047444188967347145, 0.0037600761279463768, 0.0019625483546406031, 0.0026463319081813097, 0.0018910226644948125, 0.0045210034586489201, 0.0021998211741447449, 0.00085415330249816179, 0.0021974847186356783, 0.0020178731065243483, 0.0025421490427106619, 0.0018915610853582621, 0.0036739490460604429, 0.0035500898957252502, 0.0029063825495541096, 0.0030824474524706602, 0.0017468425212427974, 0.0032707632053643465, 0.0020865779370069504, 0.0022752515505999327, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 10680, -12366, 9969, 6168, 5036, -2384, 4735, 5069, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00019652166520245373, 0.00011946082668146119, 8.7794956925790757e-05, 0.00012130574032198638, 0.00022179081861395389, 9.6921699878294021e-05, 0.00020112868514843285, 9.6837226010393351e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -26,-19,-22,-40,-66,-39,2,-36,64,2,-5,-7,15,7,-34,9,-34,42,-36,-25,-3,5,-21,-7,12,-11,89,-13,-18,-78,-9,18,3,24,127,-16,-18,-53,27,-30,22,-10,-13,-7,-27,-3,-30,-106, 
  /* [1][0][][] */ 11,-54,-40,83,5,-12,26,61,93,85,33,-65,-72,99,-25,13,-30,-49,4,-46,-57,38,-51,38,111,-2,-27,7,26,-11,127,15,-14,-26,-37,-17,-2,9,-21,2,8,-15,-8,13,-4,34,12,15, 
  /* [2][0][][] */ -54,9,-54,77,-67,-90,61,-127,-109,56,55,-90,-19,-22,-69,5,107,44,-46,-11,-85,-42,-67,26,74,-26,75,-39,83,-5,-82,3,-8,-56,30,-1,-42,50,11,-90,47,-104,-22,-105,-21,-93,-78,62, 
  /* [3][0][][] */ 23,-40,-5,-31,40,-3,-15,-28,37,-64,4,-37,-90,-65,-11,0,5,-26,24,-60,2,21,-77,-1,82,-55,47,12,13,-13,-7,-47,-40,45,13,-28,-58,24,15,4,127,32,-49,21,-29,30,-8,-41, 
  /* [4][0][][] */ 5,-6,8,-2,-3,47,-6,-38,56,6,16,-57,-1,16,-67,17,0,13,42,-40,-45,42,0,45,28,6,-38,23,36,-9,-4,26,-1,2,36,24,-127,-13,67,7,15,-25,-12,28,-51,57,-38,-118, 
  /* [5][0][][] */ -58,-96,11,104,-46,-31,-43,70,-98,85,76,39,-77,6,68,-64,1,40,49,-19,-16,28,39,50,-40,9,-25,54,-43,-91,52,17,-114,-78,-23,-4,127,-20,-15,15,-32,-16,54,108,5,36,43,37, 
  /* [6][0][][] */ 75,-9,-29,-26,81,-39,-25,-70,54,20,44,-17,-12,-7,22,-10,14,-20,5,-38,-48,23,12,34,52,-57,69,19,-32,114,-11,15,38,48,-127,0,-90,-58,20,-67,-22,-15,-23,-91,-7,15,-11,-12, 
  /* [7][0][][] */ -57,-81,73,-11,24,126,59,-103,-6,-115,-79,7,-7,-8,-66,-6,23,-50,116,81,48,-54,31,-17,-54,15,112,-18,74,37,20,-9,-42,-53,-59,101,-127,90,-45,-46,-37,58,20,-59,21,-31,74,-30, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0083521706983447075, 0.0050770849920809269, 0.0037312856875360012, 0.0051554939709603786, 0.0094261094927787781, 0.0041191722266376019, 0.0085479691624641418, 0.0041155819781124592, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 6292, 4080, 2571, 6324, 4643, 215, 5382, -2154, -479, 3648, -1349, -1573, -6946, 10468, 779, 461, -5529, -489, 625, 6243, 9549, -3243, -8203, -1757, -7932, 15381, -133, -2532, -3974, 181, -3271, -2266, 22712, -1105, -3760, 1938, -1859, -498, 1155, 3626, 15473, 5420, 323, 835, 3912, 1326, -5342, 924, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00019145543046761304, 0.0002348903362872079, 0.00023476089700125158, 0.00023920828243717551, 0.0002275087172165513, 0.00060185708571225405, 0.0001434950390830636, 0.00029171450296416879, 9.7980693681165576e-05, 0.00017993120127357543, 0.00044839063775725663, 0.00030273909214884043, 0.0001998711668420583, 0.00019498528854455799, 0.00023844136740081012, 0.00045165055780671537, 6.7851688072551042e-05, 0.0014014800544828176, 0.00034798617707565427, 0.00015972276742104441, 9.7330419521313161e-05, 0.00049225421389564872, 0.00012430096103344113, 0.00018484561587683856, 0.00019173540931660682, 0.00014944435679353774, 0.00029706352506764233, 0.00016786491323728114, 0.00023483583936467767, 0.0001496021868661046, 0.00014697143342345953, 0.00048534682719036937, 4.6252305764937773e-05, 0.00045486868475563824, 0.00011361912038410082, 0.00033006368903443217, 0.00016970264550764114, 0.00023955319193191826, 0.00072902278043329716, 0.00018418120453134179, 7.2639624704606831e-05, 0.00031244714045897126, 0.00022129190620034933, 9.5286333817057312e-05, 0.00021390736219473183, 0.00025347198243252933, 0.00010817200382007286, 0.00068983377423137426, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -62,82,-64,-50,-24,-27,22,21,17,-28,6,40,11,-56,-123,27,127,-5,74,26,-127,-49,23,-85,-4,-110,-15,81,33,9,56,127,35,-5,6,28,-27,-83,-6,11,83,-127,-32,48,47,-112,-4,4, 21,-127,23,-125,-27,-37,-64,127,61,-66,23,60,27,-127,-127,13,-17,5,-40,-86,-42,12,-39,127,-7,-42,12,127,50,-10,3,-88,-49,28,5,-7,127,-123,33,-17,5,-113,-41,47,75,80,70,-27, -40,1,1,-34,-23,30,16,56,-38,33,24,39,40,8,-77,44,48,15,-20,1,-70,54,26,41,4,39,10,17,17,-8,3,-30,-127,11,13,45,-49,103,-29,4,62,-74,17,-34,42,41,-28,-11, 
  /* [0][1][][] */ -15,-15,-127,-3,-41,12,-5,31,52,-83,0,-127,-15,-17,-90,105,68,1,127,83,-5,127,99,65,28,-97,-48,9,44,-50,78,-103,87,-24,-42,4,-7,-58,18,15,52,88,19,-13,-87,127,46,-10, -127,65,126,127,127,-114,-127,-9,10,-127,-127,-124,127,-41,14,4,-28,-127,-115,-127,111,-1,-127,-66,127,-64,127,-31,127,127,-54,87,-98,-127,127,-127,77,-42,-127,-127,9,97,-96,30,-127,-75,127,127, 1,4,-7,22,26,127,-15,45,63,23,59,-50,0,-43,-58,-29,73,51,-12,53,-63,-124,100,0,40,127,22,20,26,19,127,31,-47,2,63,19,-25,127,36,-15,-4,65,106,-19,-53,-65,78,1, 
  /* [0][2][][] */ -36,11,-63,8,-12,-13,19,4,53,-3,13,63,25,18,126,-2,23,5,36,2,-57,23,123,25,16,-121,-19,-43,14,-26,-10,-30,-24,60,1,-65,-73,28,-14,2,-13,-44,-5,-63,-19,-3,-38,-20, -45,-76,49,9,-115,-16,-103,-97,127,50,46,82,16,-43,30,-12,35,122,-39,-47,-75,23,34,-4,20,-103,-63,-42,17,-45,94,44,-111,46,-56,-65,24,-78,22,34,-127,-23,-127,127,22,-15,49,-36, 17,-33,1,9,-68,30,20,-105,-21,-7,-5,33,29,11,104,-127,33,-22,-19,-33,-79,18,69,18,17,-18,-22,30,18,-43,0,24,-114,57,-35,-26,-84,72,-9,16,-11,-44,48,45,-2,-31,-68,-12, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.0081368554383516312, 0.0099828392267227173, 0.0099773379042744637, 0.010166351683437824, 0.0096691204234957695, 0.025578925386071205, 0.0060985391028225422, 0.012397865764796734, 0.0041641793213784695, 0.0076470756903290749, 0.019056601449847221, 0.012866411358118057, 0.008494524285197258, 0.0082868747413158417, 0.010133758187294006, 0.019195148721337318, 0.0028836966957896948, 0.059562899172306061, 0.014789411798119545, 0.0067882174625992775, 0.0041365427896380424, 0.020920803770422935, 0.0052827908657491207, 0.0078559387475252151, 0.0081487549468874931, 0.0063513847999274731, 0.012625199742615223, 0.0071342587471008301, 0.0099805230274796486, 0.0063580926507711411, 0.0062462859787046909, 0.020627239719033241, 0.0019657230004668236, 0.019331919029355049, 0.0048288125544786453, 0.01402770634740591, 0.007212362252175808, 0.010181010700762272, 0.030983468517661095, 0.0078277010470628738, 0.0030871839262545109, 0.013279003091156483, 0.0094049060717225075, 0.0040496690198779106, 0.0090910624712705612, 0.010772558860480785, 0.0045973099768161774, 0.029317934066057205, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 2894, 886, 2369, 12931, 676, 7317, 2232, 3050, 2051, 3905, 4395, 6899, 6261, 2064, 1982, 720, 87, -2511, 7893, 2954, 1174, 9010, 8931, 653, 2277, 8445, 1339, -250, -1723, 1744, 7033, 3727, 1774, 129, 1133, -1548, 2038, 4035, -47, 1518, 1644, 24986, 2574, 1332, 3198, 2384, -439, 12344, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00027176050934940577, 0.00047615039511583745, 0.00027942971792072058, 8.8307031546719372e-05, 0.00079702830407768488, 0.00011325056402711198, 0.00028994810418225825, 0.00019301868451293558, 0.00029007915873080492, 0.00017703440971672535, 0.00019970712310168892, 0.00010407156514702365, 0.00014829874271526933, 0.00021635710436385125, 0.00018801099213305861, 0.00025083054788410664, 0.00033294624881818891, 0.0002989361819345504, 0.00013508467236533761, 0.00038745941128581762, 0.00049979367759078741, 0.00011156156688230112, 0.00010401741747045889, 0.00034726009471341968, 0.00024920841678977013, 0.00012433499796316028, 0.00033831162727437913, 0.00021176680456846952, 0.00023624624009244144, 0.00046561824274249375, 0.00013021101767662913, 0.00018763437401503325, 0.00034059965400956571, 0.0003457290877122432, 0.00051176000852137804, 0.00021023176668677479, 0.00014873314648866653, 0.00013577908976003528, 0.00030873931245878339, 0.00027942503220401704, 0.00030710297869518399, 4.5877408410888165e-05, 0.00017057970399037004, 0.00019485599477775395, 0.00018591021944303066, 0.00022185521083883941, 0.00033854693174362183, 8.7280408479273319e-05, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -120,3,46,-123,-127,108,32,-69, 
  /* [1][0][][] */ 74,4,1,-26,11,72,-127,33, 
  /* [2][0][][] */ -24,40,-84,79,-62,127,1,31, 
  /* [3][0][][] */ 127,-28,-49,113,-54,-87,2,77, 
  /* [4][0][][] */ -70,-7,-15,19,-8,-16,127,-3, 
  /* [5][0][][] */ 55,55,11,28,-127,-76,49,-71, 
  /* [6][0][][] */ 4,-90,48,127,24,-96,-21,47, 
  /* [7][0][][] */ 113,-27,113,-15,-48,15,69,127, 
  /* [8][0][][] */ -52,-127,46,60,93,-40,-65,-13, 
  /* [9][0][][] */ -92,-92,31,-17,-28,-23,-49,127, 
  /* [10][0][][] */ 13,-68,36,127,90,117,45,-37, 
  /* [11][0][][] */ -104,-124,-11,-63,44,118,-62,127, 
  /* [12][0][][] */ 127,0,109,-64,6,-122,117,-15, 
  /* [13][0][][] */ 30,18,19,127,-3,18,44,-54, 
  /* [14][0][][] */ -32,-5,58,2,116,-11,-11,127, 
  /* [15][0][][] */ -59,96,13,108,27,61,-127,59, 
  /* [16][0][][] */ 7,-12,-95,-127,-83,84,45,67, 
  /* [17][0][][] */ 66,127,53,0,-4,-18,34,31, 
  /* [18][0][][] */ 21,28,-39,-127,-49,-115,21,-14, 
  /* [19][0][][] */ 55,-82,-98,-120,-56,127,-4,2, 
  /* [20][0][][] */ 45,-8,6,-19,127,34,33,-38, 
  /* [21][0][][] */ -127,-55,-25,-71,42,58,-3,-35, 
  /* [22][0][][] */ -40,-40,66,78,38,-17,-23,127, 
  /* [23][0][][] */ 20,22,-35,107,127,72,23,61, 
  /* [24][0][][] */ 88,15,-127,-2,-2,-14,-6,-29, 
  /* [25][0][][] */ -19,-22,-62,-25,94,-13,-127,-54, 
  /* [26][0][][] */ 127,33,94,-33,-105,30,55,104, 
  /* [27][0][][] */ -7,-62,-77,127,41,72,-35,-105, 
  /* [28][0][][] */ -65,127,85,66,65,-14,-30,-6, 
  /* [29][0][][] */ 3,-12,41,1,-59,6,127,60, 
  /* [30][0][][] */ -72,-87,33,-65,-58,127,29,36, 
  /* [31][0][][] */ 73,29,114,-47,-65,35,61,127, 
  /* [32][0][][] */ -117,-14,-38,32,-21,21,127,18, 
  /* [33][0][][] */ -93,127,23,50,-2,0,-73,-8, 
  /* [34][0][][] */ 123,-1,11,-5,0,58,-127,12, 
  /* [35][0][][] */ 6,-7,12,16,-36,30,7,-127, 
  /* [36][0][][] */ 3,-20,-2,-72,69,-22,4,127, 
  /* [37][0][][] */ 68,-69,-66,-13,-51,40,35,-127, 
  /* [38][0][][] */ 21,127,17,62,-36,-61,-21,-11, 
  /* [39][0][][] */ 95,-17,112,-27,-57,22,127,124, 
  /* [40][0][][] */ -62,-67,127,91,-29,-42,-114,51, 
  /* [41][0][][] */ 12,-32,-16,-5,35,-24,-13,127, 
  /* [42][0][][] */ 50,-44,-88,-53,-53,67,22,-127, 
  /* [43][0][][] */ 68,-11,127,-39,-66,-31,89,115, 
  /* [44][0][][] */ -127,-74,-46,25,88,-54,-73,-1, 
  /* [45][0][][] */ 127,-6,123,-12,-60,24,-12,117, 
  /* [46][0][][] */ 12,-90,9,61,127,32,25,25, 
  /* [47][0][][] */ 57,127,-23,100,-14,-40,25,-72, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0036133762914687395, 0.0063309804536402225, 0.0037153474986553192, 0.0011741460766643286, 0.010597430169582367, 0.0015057997079566121, 0.0038552018813788891, 0.0025664109271019697, 0.003856944153085351, 0.0023538810200989246, 0.0026553415227681398, 0.0013837540755048394, 0.0019718066323548555, 0.0028767227195203304, 0.0024998276494443417, 0.0033350875601172447, 0.0044269128702580929, 0.00397470872849226, 0.0017961098346859217, 0.0051517295651137829, 0.0066453455947339535, 0.0014833424938842654, 0.0013830341631546617, 0.0046172323636710644, 0.0033135197591036558, 0.0016531802248209715, 0.0044982517138123512, 0.002815689193084836, 0.0031411722302436829, 0.0061909430660307407, 0.0017313089920207858, 0.0024948201607912779, 0.0045286738313734531, 0.0045968755148351192, 0.0068044527433812618, 0.0027952790260314941, 0.0019775824621319771, 0.0018053430831059813, 0.0041050529107451439, 0.00371528510004282, 0.0040832958184182644, 0.00060999422566965222, 0.0022680582478642464, 0.002590839983895421, 0.0024718954227864742, 0.0029498264193534851, 0.0045013804920017719, 0.0011604959145188332, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 4099, 1794, 4817, 11438, 5868, 8117, 3429, -1995, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00012515157868620008, 9.8744872957468033e-05, 0.00011857414210680872, 0.00015521673776675016, 7.4598443461582065e-05, 0.00013484850933309644, 0.00012326646537985653, 0.00031351292273029685, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -46,47,-33,6,-40,-11,-90,34,5,22,48,51,31,-1,-42,6,-39,42,3,-67,21,45,-127,4,-9,3,-26,50,5,-14,25,30,11,-23,27,21,-6,127,-76,-15,-12,23,-29,27,0,-9,17,0, 
  /* [1][0][][] */ -89,-112,-78,1,91,-26,-127,101,-29,-63,14,-62,-35,91,3,-17,111,-126,-5,-18,-70,-1,4,-17,26,-13,-24,-45,5,27,-104,-19,45,-48,-82,-92,38,-1,-79,-20,-6,36,2,79,-19,9,9,44, 
  /* [2][0][][] */ -8,-69,-7,45,127,30,71,-10,-34,-31,-34,-60,-3,-27,28,28,-37,-103,33,-63,5,-53,-59,11,-83,44,80,-94,-24,-36,-53,-46,6,8,-75,-49,-7,126,67,-35,-20,12,-26,-55,32,23,40,-10, 
  /* [3][0][][] */ 10,22,25,-18,27,5,28,-89,21,21,-19,5,5,-102,-35,-11,-27,7,-8,0,-12,37,-127,-9,17,-84,19,22,30,-21,-28,62,10,10,3,-35,-79,-55,-5,-28,-15,3,19,-2,-3,12,-8,-41, 
  /* [4][0][][] */ 33,-55,19,71,39,9,-11,-31,-34,-12,42,-32,57,37,-26,7,-27,-48,61,28,34,-55,127,34,-32,5,-45,-14,-14,-13,-78,-54,77,-8,-56,-41,-50,-41,-24,15,-72,103,2,-24,65,75,36,25, 
  /* [5][0][][] */ -66,-26,-42,52,-14,34,9,-57,-57,-43,15,-10,-2,51,-67,0,127,-12,48,-71,6,-80,-2,-11,78,-112,-86,2,52,-46,30,-85,20,-32,-42,36,-89,-31,27,-47,-59,25,73,57,39,22,18,-57, 
  /* [6][0][][] */ -18,15,-31,38,-23,75,-74,-3,-25,2,-127,0,56,43,115,19,16,8,66,-3,41,-12,-37,-14,14,-4,-75,19,6,-49,19,-29,40,-45,-5,-12,-2,-2,-46,-16,-42,56,-28,16,38,37,24,6, 
  /* [7][0][][] */ 33,-13,34,-20,-5,12,14,-19,19,2,-13,-11,-11,-12,1,-11,13,-10,-25,-19,-22,11,127,10,3,-11,-2,5,5,-24,-24,15,-2,24,-3,-25,-6,17,7,29,8,-3,13,1,-16,-5,-23,18, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0053189420141279697, 0.0041966568678617477, 0.0050394008867442608, 0.0065967114642262459, 0.0031704339198768139, 0.0057310615666210651, 0.0052388245239853859, 0.013324298895895481, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 1809, 286, 625, 5141, 13030, 3823, 5019, 2887, 5480, 242, 3522, 2731, 819, -865, -427, 661, 18905, -1603, -520, 36875, 373, 19497, 97, -3381, -1149, -8462, 9603, 862, 262, -506, 2026, 12786, 1238, -1256, -69, 604, 9293, -5257, 6702, 699, 1790, -345, 15811, -5453, 622, -1347, -464, -559, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.000108129192085471, 0.00019859960593748838, 0.0012146680383011699, 0.00058198190527036786, 0.00010184835264226422, 0.0001338618021691218, 5.5218835768755525e-05, 0.00046779584954492748, 0.00024876432144083083, 0.00041143241105601192, 4.2489100451348349e-05, 0.00046003720490261912, 0.0010850998805835843, 8.7952859757933766e-05, 0.00014342193026095629, 0.0030641290359199047, 9.8892727692145854e-05, 0.00026689624064601958, 0.00029471554444171488, 5.8394532970851287e-05, 0.00046327969175763428, 6.5145497501362115e-05, 0.00023962452542036772, 9.0588378952816129e-05, 0.00015494984108954668, 0.00037919892929494381, 0.00010871861013583839, 0.00029805058147758245, 0.0017106455052271485, 0.00047730281949043274, 0.00014421976811718196, 0.00013410790415946394, 0.00053159374510869384, 0.0007908801781013608, 0.00030166524811647832, 0.00032762685441412032, 0.00011270782852079719, 6.9142035499680787e-05, 7.5018942879978567e-05, 0.00022024438658263534, 0.00018197529425378889, 0.00038023464730940759, 4.918530976283364e-05, 0.00012215373863000423, 0.00097109097987413406, 0.00038489402504637837, 0.002463602926582098, 0.00050935411127284169, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 117,-36,-69,-127,-4,-116,57,-19,77,16,92,33,-79,127,66,-123,52,-85,10,-91,-127,-39,37,113,3,67,5,45,-127,114,91,-76,-54,-60,54,86,-127,39,127,76,-57,-127,-47,9,-70,-15,11,-82, 26,-62,75,119,61,26,96,-127,-98,80,80,44,0,110,61,112,49,-73,-102,-93,85,-55,54,6,116,127,-12,63,-5,127,53,-30,34,116,127,127,-95,14,57,-24,127,30,-23,92,127,106,0,-11, 45,-17,13,-70,20,40,-7,-77,-7,24,-51,20,67,36,-74,-11,12,-14,93,-17,30,13,-82,-90,9,4,9,7,13,52,9,-4,-14,-30,25,-5,-25,1,3,-59,-57,121,45,34,-75,-59,-2,74, 
  /* [0][1][][] */ 127,58,-127,3,-110,-127,73,-5,82,-73,127,-88,71,108,127,121,-48,109,-12,-110,112,-71,48,127,-14,6,-37,-3,-64,120,111,-127,-127,-69,-24,24,-8,127,103,127,-63,-90,-108,18,1,-17,-118,-127, 68,127,110,-41,-127,14,127,-94,-127,-127,87,-127,22,115,82,-127,-50,127,123,-127,-64,-127,73,-24,54,20,-127,49,-2,90,127,-96,103,127,-31,6,-17,116,116,-47,120,-11,-69,127,-17,127,127,43, 62,34,13,-11,-22,78,35,-35,-14,-92,-54,-77,-127,-14,-84,-10,17,35,-127,-34,-53,3,-127,-84,-40,4,-76,-2,24,37,49,-3,-4,-49,-9,-12,3,52,-19,-76,-109,107,7,98,5,-64,6,94, 
  /* [0][2][][] */ 43,-46,-43,-7,25,-15,-13,-16,60,24,43,28,16,30,-8,-13,-127,-30,13,-20,9,-56,11,57,103,-22,-28,-110,-3,84,26,-106,-26,-48,-57,27,81,113,25,67,-110,-60,-127,36,7,2,97,-64, -19,-54,-10,7,30,7,12,-29,-80,69,14,34,-2,42,-5,14,-105,-23,9,-38,-21,-64,26,-6,127,-18,-55,-127,9,69,46,-85,30,67,-45,19,90,67,16,-25,-52,1,-78,85,10,-3,-88,60, 19,-16,13,-10,16,32,3,-20,-17,66,-35,7,9,-52,-35,-1,-4,-8,22,-10,25,-10,-42,-44,2,-17,-12,-47,2,86,25,-20,-2,-35,-25,5,71,40,-27,-57,-118,69,-45,44,1,20,8,12, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.004595490638166666, 0.0084404833614826202, 0.0516233891248703, 0.02473423071205616, 0.0043285549618303776, 0.0056891264393925667, 0.0023468004073947668, 0.019881322979927063, 0.010572483763098717, 0.017485877498984337, 0.0018057867418974638, 0.019551580771803856, 0.046116743236780167, 0.0037379965651780367, 0.0060954317450523376, 0.13022547960281372, 0.0042029409669339657, 0.011343089863657951, 0.012525410391390324, 0.002481767674908042, 0.019689386710524559, 0.0027686834800988436, 0.010184042155742645, 0.0038500060327351093, 0.0065853679552674294, 0.016115954145789146, 0.0046205408871173859, 0.012667149305343628, 0.072702430188655853, 0.020285369828343391, 0.0061293398030102253, 0.0056995861232280731, 0.022592734545469284, 0.033612407743930817, 0.0128207728266716, 0.013924140483140945, 0.004790082573890686, 0.002938536461442709, 0.0031883050687611103, 0.0093603860586881638, 0.007733949925750494, 0.016159972175955772, 0.0020903756376355886, 0.0051915338262915611, 0.04127136617898941, 0.016357995569705963, 0.10470312088727951, 0.02164754830300808, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1070, -8319, 23766, 13257, 11828, 1270, 5024, -328, -3895, -6427, 1558, 1104, 39735, -15634, -142, 2901, -7189, 282, 2208, 4097, 12735, 2994, -505, 1775, 14171, 34550, 11077, -13395, 2826, -2156, -323, -5190, 15254, 10481, 13295, -1838, -11856, -161, -3771, -610, -15059, -11204, -2800, 2740, 13060, -13102, 8044, -1641, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00022000700118951499, 0.00033180438913404942, 4.7404722863575444e-05, 9.9165707069914788e-05, 0.00028213066980242729, 0.00086809217464178801, 0.00095508125377818942, 0.00043757446110248566, 0.00025480749900452793, 0.00022109514975454658, 0.0020609907805919647, 0.00034288011374883354, 3.4158492780989036e-05, 0.00030239718034863472, 0.00071883708005771041, 6.516322901006788e-05, 0.00024592314730398357, 0.0002534731465857476, 0.00027623516507446766, 0.0002474107313901186, 0.0001017843751469627, 0.0013066558167338371, 0.0004807873337995261, 0.0010923438239842653, 0.00017249755910597742, 5.3286421461962163e-05, 0.00037980393972247839, 0.00026158842956647277, 0.00057042273692786694, 0.00042603525798767805, 0.00060461112298071384, 0.0013764550676569343, 0.00019553453603293747, 0.00021159903553780168, 0.00022638143855147064, 0.00046121331979520619, 0.00033198748133145273, 0.00043988091056235135, 0.0011291699483990669, 0.00045125721953809261, 0.00028460065368562937, 0.00020889738516416401, 0.00021596410078927875, 0.00022057014575693756, 7.1363356255460531e-05, 0.0002479775866959244, 4.284290480427444e-05, 0.0004465763340704143, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 6,53,-7,-14,85,-26,127,-10, 
  /* [1][0][][] */ 105,59,64,-10,6,-85,-35,127, 
  /* [2][0][][] */ -81,-5,-24,127,5,6,-32,44, 
  /* [3][0][][] */ 20,-18,-127,21,15,-64,31,85, 
  /* [4][0][][] */ -123,86,-127,24,-9,59,-28,-64, 
  /* [5][0][][] */ 127,-23,9,-35,-1,-24,0,-93, 
  /* [6][0][][] */ 1,-3,-14,-1,-127,-35,55,1, 
  /* [7][0][][] */ 0,-47,3,2,-29,-3,-127,3, 
  /* [8][0][][] */ 9,20,61,-23,127,48,-115,9, 
  /* [9][0][][] */ 107,-25,40,-51,-29,-41,10,127, 
  /* [10][0][][] */ 121,9,-12,-35,-5,13,-2,-127, 
  /* [11][0][][] */ -38,-10,12,127,10,-30,-17,43, 
  /* [12][0][][] */ -123,32,-82,20,-15,80,-27,-127, 
  /* [13][0][][] */ 123,16,127,21,-9,32,24,54, 
  /* [14][0][][] */ -127,-8,16,14,-5,-7,9,118, 
  /* [15][0][][] */ -95,1,-15,127,12,4,-5,121, 
  /* [16][0][][] */ 57,-74,123,127,-30,-119,39,56, 
  /* [17][0][][] */ 17,-49,-60,127,4,17,-5,92, 
  /* [18][0][][] */ 19,-47,-114,41,-13,15,49,127, 
  /* [19][0][][] */ 34,35,0,127,-12,14,-66,-37, 
  /* [20][0][][] */ 25,118,113,-102,-14,-102,-11,-127, 
  /* [21][0][][] */ 7,9,-5,8,-127,-8,70,6, 
  /* [22][0][][] */ -4,58,-12,-20,3,127,-4,1, 
  /* [23][0][][] */ 91,8,2,92,-20,-1,-38,-127, 
  /* [24][0][][] */ -127,32,-92,-53,24,-25,-24,-65, 
  /* [25][0][][] */ -30,-1,-50,-31,11,-127,10,-34, 
  /* [26][0][][] */ -90,-12,-127,8,8,9,-20,-26, 
  /* [27][0][][] */ 78,12,127,43,12,34,30,33, 
  /* [28][0][][] */ 6,-61,-26,23,15,-127,-9,16, 
  /* [29][0][][] */ 3,-8,28,-127,-34,27,30,3, 
  /* [30][0][][] */ -47,4,127,-1,6,1,-5,-117, 
  /* [31][0][][] */ 1,6,12,2,127,30,-70,6, 
  /* [32][0][][] */ -127,-7,-82,1,18,-29,-1,-62, 
  /* [33][0][][] */ 11,-58,-1,-31,38,-127,13,-20, 
  /* [34][0][][] */ -63,-127,-113,23,-35,-10,-45,-25, 
  /* [35][0][][] */ 58,6,-107,-17,0,-8,0,127, 
  /* [36][0][][] */ 49,37,65,54,-29,127,-14,27, 
  /* [37][0][][] */ -11,8,-3,127,0,-16,-27,11, 
  /* [38][0][][] */ -6,22,3,4,127,20,-25,-6, 
  /* [39][0][][] */ -13,42,-20,41,-72,127,-54,-3, 
  /* [40][0][][] */ 127,-7,123,37,-64,41,12,67, 
  /* [41][0][][] */ 122,1,127,13,-24,19,37,38, 
  /* [42][0][][] */ 59,-50,8,-16,34,127,4,-14, 
  /* [43][0][][] */ 0,-66,-1,-6,-52,-7,-127,13, 
  /* [44][0][][] */ -16,-106,66,113,34,25,28,-127, 
  /* [45][0][][] */ 106,-15,127,-28,-2,48,13,33, 
  /* [46][0][][] */ 80,-6,2,-127,-11,-16,19,-56, 
  /* [47][0][][] */ -7,57,-13,-5,-6,127,-18,-4, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0028347568586468697, 0.0042752493172883987, 0.00061080267187207937, 0.0012777351075783372, 0.0036352109163999557, 0.011185236275196075, 0.012306077405810356, 0.0056380806490778923, 0.003283156082034111, 0.0028487774543464184, 0.026555553078651428, 0.0044179582037031651, 0.00044012701255269349, 0.0038963418919593096, 0.0092621063813567162, 0.00083961832569912076, 0.0031686823349446058, 0.0032659629359841347, 0.0035592482890933752, 0.003187849884852767, 0.001311476225964725, 0.016836062073707581, 0.0061948718503117561, 0.014074684120714664, 0.0022226048167794943, 0.00068658747477456927, 0.0048937159590423107, 0.0033705271780490875, 0.0073498100973665714, 0.0054893996566534042, 0.0077903228811919689, 0.017735414206981659, 0.0025194329209625721, 0.0027264214586466551, 0.0029168904293328524, 0.0059426636435091496, 0.0042776083573698997, 0.0056677986867725849, 0.01454918272793293, 0.005814380943775177, 0.0036670363042503595, 0.0026916111819446087, 0.0027826647274196148, 0.0028420127928256989, 0.00091950601199641824, 0.0031951535493135452, 0.00055202434305101633, 0.0057540684938430786, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 2361, 1386, -1745, -12000, -1908, -2313, -360, 4960, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00022320501739159226, 0.00020608208433259279, 0.00034242650144733489, 0.00016570351726841182, 0.0001644089788896963, 0.00010889094846788794, 0.00030234659789130092, 0.00019851537945214659, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -11,-20,-30,24,-15,-127,13,31, 
  /* [1][0][][] */ -46,22,-127,113,9,82,-17,19, 
  /* [2][0][][] */ 22,-13,27,7,-11,-127,15,35, 
  /* [3][0][][] */ 22,52,82,127,19,-54,-26,-15, 
  /* [4][0][][] */ 22,43,41,-20,-127,-13,16,-9, 
  /* [5][0][][] */ 61,-22,127,-108,45,-62,10,-33, 
  /* [6][0][][] */ 38,127,45,-34,29,5,-74,-28, 
  /* [7][0][][] */ -24,-24,-36,-25,-7,-127,26,48, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0094862133264541626, 0.0087584881111979485, 0.014553125947713852, 0.0070423991419374943, 0.0069873817265033722, 0.0046278652735054493, 0.012849730439484119, 0.0084369033575057983, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { 13233, -152, 3175, 3388, 9403, 3103, 1230, 8927, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00010684238804969937, 0.00041448563570156693, 0.00018659055058378726, 0.00029769924003630877, 0.00025059195468202233, 0.00020522598060779274, 0.00073931080987676978, 6.3266867073252797e-05, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -27,1,0,0,4,27,-11,-6, 8,-2,2,-7,12,127,-17,127, 5,3,2,-9,5,14,-12,21, 
  /* [0][1][][] */ -2,-127,-17,6,-4,-7,-127,-26, -127,103,-77,127,-127,-10,122,-48, 8,7,1,-59,-2,-1,38,-19, 
  /* [0][2][][] */ 6,-5,-3,0,-3,-24,3,-13, 56,14,127,-20,3,-117,-12,-10, 9,7,-4,-8,-7,-23,11,1, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.0045408015139400959, 0.017615638673305511, 0.0079300981014966965, 0.012652217410504818, 0.010650157928466797, 0.0087221041321754456, 0.031420707702636719, 0.0026888416614383459, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 62424, 18179, 38654, 22684, 14792, 412336, 2817, 37897, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 6.081322135287337e-05, 4.2502462747506797e-05, 0.00011062723933719099, 7.0228306867647916e-05, 8.3397564594633877e-05, 1.0096722689922899e-05, 2.3103812054614536e-05, 8.9177658082917333e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*3] = { 
  /* [0][0][][] */ 5,-7,9, 4,-28,26, 8,-28,16, 
  /* [0][1][][] */ 35,24,23, 60,14,54, 20,-36,34, 
  /* [0][2][][] */ -25,-94,-16, -32,-127,-3, -11,-57,15, 
  /* [1][0][][] */ 27,71,20, -1,2,-8, -38,-74,-32, 
  /* [1][1][][] */ 48,115,33, -3,-4,-9, -58,-127,-42, 
  /* [1][2][][] */ 27,42,7, 1,-3,-4, -36,-54,-8, 
  /* [2][0][][] */ 43,92,9, 53,127,10, 16,42,-3, 
  /* [2][1][][] */ -49,-87,-31, -84,-96,-42, -32,-7,-23, 
  /* [2][2][][] */ 0,10,5, 4,15,-2, 1,12,-7, 
  /* [3][0][][] */ 44,-33,-19, 76,-40,-44, 30,-19,-17, 
  /* [3][1][][] */ 84,-53,-36, 127,-56,-78, 58,-31,-34, 
  /* [3][2][][] */ 24,-16,0, 40,-30,-19, 12,-14,-6, 
  /* [4][0][][] */ -10,-22,-3, 29,46,11, -13,-26,-2, 
  /* [4][1][][] */ -26,-57,-8, 65,127,20, -31,-58,-6, 
  /* [4][2][][] */ -7,-11,5, 23,27,-1, -9,-10,0, 
  /* [5][0][][] */ -11,-60,-78, -52,-109,-107, -37,-33,-49, 
  /* [5][1][][] */ -33,-101,-57, -73,-127,-69, -47,-39,-29, 
  /* [5][2][][] */ 19,24,10, 11,17,16, 3,22,18, 
  /* [6][0][][] */ -99,-8,31, 4,21,-14, 64,18,-19, 
  /* [6][1][][] */ -127,-36,41, 16,22,-26, 109,19,-31, 
  /* [6][2][][] */ -53,-14,18, 15,-7,-1, 39,-9,31, 
  /* [7][0][][] */ -7,16,-3, -17,22,-8, -6,22,-7, 
  /* [7][1][][] */ 16,84,-7, 21,127,-25, -3,60,-28, 
  /* [7][2][][] */ -29,-52,-21, -45,-55,-35, -21,3,-21, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant43_scale = { 8, { 0.015507370233535767, 0.010838127695024014, 0.028209945186972618, 0.017908217385411263, 0.021266378462314606, 0.0025746640749275684, 0.0058914716355502605, 0.022740300744771957, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.084042578935623169, } };
const TfArray<1, int> quant46_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.07761053740978241, } };
const TfArray<1, int> quant47_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,33,33,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.075209580361843109, } };
const TfArray<1, int> quant51_zero = { 1, { -34 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.056203849613666534, } };
const TfArray<1, int> quant54_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.07919679582118988, } };
const TfArray<1, int> quant55_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,17,17,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.063082411885261536, } };
const TfArray<1, int> quant59_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.020648149773478508, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.036559347063302994, } };
const TfArray<1, int> quant62_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.063049405813217163, } };
const TfArray<1, int> quant63_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.019957220181822777, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.044533781707286835, } };
const TfArray<1, int> quant66_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.089003525674343109, } };
const TfArray<1, int> quant67_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.022517569363117218, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,8,8,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.037940338253974915, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,8,8,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.1415211409330368, } };
const TfArray<1, int> quant70_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,8,8,4 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16384), (TfLiteIntArray*)&g0::tensor_dimension44, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8192), (TfLiteIntArray*)&g0::tensor_dimension46, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 52272), (TfLiteIntArray*)&g0::tensor_dimension48, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 52272, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 52272), (TfLiteIntArray*)&g0::tensor_dimension50, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension51, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 12288), (TfLiteIntArray*)&g0::tensor_dimension52, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 12288), (TfLiteIntArray*)&g0::tensor_dimension54, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13872), (TfLiteIntArray*)&g0::tensor_dimension56, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 13872, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13872), (TfLiteIntArray*)&g0::tensor_dimension58, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 7520), (TfLiteIntArray*)&g0::tensor_dimension59, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3072), (TfLiteIntArray*)&g0::tensor_dimension60, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3072), (TfLiteIntArray*)&g0::tensor_dimension62, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 7008), (TfLiteIntArray*)&g0::tensor_dimension63, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3072), (TfLiteIntArray*)&g0::tensor_dimension64, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3584), (TfLiteIntArray*)&g0::tensor_dimension66, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3072), (TfLiteIntArray*)&g0::tensor_dimension67, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3072), (TfLiteIntArray*)&g0::tensor_dimension69, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 256), (TfLiteIntArray*)&g0::tensor_dimension70, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_25_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_25_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_25_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_25_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_25_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
